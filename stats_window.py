# stats_window.py

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import os
import ast
import datetime
import numpy as np
from PySide6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                               QPushButton, QLabel, QTabWidget, QTableWidget,
                               QTableWidgetItem, QFrame, QScrollArea, QTextEdit)
from PySide6.QtCore import Qt, QThread, Signal
from PySide6.QtGui import QFont

from utils import read_gitignore, is_ignored, find_projects

IGNORED_DIRS = {'.git', '__pycache__', '.idea', '.vscode', '.venv', '.eggs'}


def analyze_project_structure(directory, task_queue):
    ignored_paths = read_gitignore(directory)

    structure = {
        'total_files': 0,
        'total_dirs': 0,
        'py_files': 0,
        'py_files_venv': 0,
        'other_files': 0,
        'folders': []
    }

    venv_like = ('venv', '.venv', 'env', '.env', '__pycache__', '.git', '.idea', '.vscode', '.mypy_cache')

    for root, dirs, files in os.walk(directory):
        # –∏—Å–∫–ª—é—á–∞–µ–º —Å—Ä–∞–∑—É –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏
        dirs[:] = [d for d in dirs if d not in venv_like and not is_ignored(os.path.join(root, d), ignored_paths)]

        structure['total_dirs'] += len(dirs)
        structure['total_files'] += len(files)

        for file in files:
            file_path = os.path.join(root, file)
            if file.endswith('.py'):
                if any(p in file_path for p in venv_like) or is_ignored(file_path, ignored_paths):
                    structure['py_files_venv'] += 1
                else:
                    structure['py_files'] += 1
            else:
                structure['other_files'] += 1

        relative_root = os.path.relpath(root, directory)
        structure['folders'].append(relative_root)

    task_queue.put(('project_stats', structure))


def parse_python_files(projects_dir, export=True, max_files=5000, max_depth=6):
    import os, ast, datetime
    import pandas as pd

    IGNORED_DIRS = {'.git', '__pycache__', '.idea', '.vscode', 'venv', '.venv', 'env', '.env', '.mypy_cache'}

    project_stats = {}
    scanned_files = 0

    for root, dirs, files in os.walk(projects_dir):
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        dirs[:] = [d for d in dirs if d not in IGNORED_DIRS]

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã
        rel_root = os.path.relpath(root, projects_dir)
        depth = rel_root.count(os.sep)
        if depth > max_depth:
            continue

        py_files = [f for f in files if f.endswith(".py")]
        if not py_files:
            continue

        project_name = rel_root.replace(os.sep, " / ") if rel_root != "." else "ROOT"

        if project_name not in project_stats:
            project_stats[project_name] = {
                "py_count": 0,
                "libs": set(),
                "created": None,
                "dirs": set()
            }

        for file in py_files:
            """if scanned_files >= max_files:
                print(f"‚ö† –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {max_files} —Ñ–∞–π–ª–æ–≤. –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                break"""

            file_path = os.path.join(root, file)
            scanned_files += 1
            project_stats[project_name]["py_count"] += 1

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
            try:
                creation_time = os.path.getctime(file_path)
                creation_date = datetime.datetime.fromtimestamp(creation_time)
                current_created = project_stats[project_name]["created"]
                if current_created is None or creation_date < current_created:
                    project_stats[project_name]["created"] = creation_date
            except Exception:
                pass

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            rel_dir = os.path.relpath(root, projects_dir)
            if rel_dir != ".":
                project_stats[project_name]["dirs"].add(rel_dir)

            # –ü–∞—Ä—Å–∏–Ω–≥ –∏–º–ø–æ—Ä—Ç–æ–≤
            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    content = f.read()
                node = ast.parse(content, filename=file_path)
                for sub_node in ast.walk(node):
                    if isinstance(sub_node, ast.Import):
                        for alias in sub_node.names:
                            project_stats[project_name]["libs"].add(alias.name.split('.')[0])
                    elif isinstance(sub_node, ast.ImportFrom) and sub_node.module:
                        project_stats[project_name]["libs"].add(sub_node.module.split('.')[0])
            except Exception:
                continue

        print(f"[‚úì] {project_name} ‚Äî {len(py_files)} —Ñ–∞–π–ª–æ–≤")

    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞
    result = []
    for proj, data in project_stats.items():
        date_str = data["created"].strftime("%Y-%m-%d %H:%M:%S") if data["created"] else None
        result.append({
            "name": proj,
            "stack": sorted(data["libs"]),
            "dirs": sorted(data["dirs"]),
            "date": date_str,
            "py_count": data["py_count"]
        })

    if not result:
        print("‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å .py —Ñ–∞–π–ª–∞–º–∏.")
        return []

    df = pd.DataFrame(result)
    df["date"] = pd.to_datetime(df["date"], errors="coerce")

    if export:
        df.to_csv("project_stats.csv", index=False, encoding="utf-8-sig")
        df.to_html("project_stats.html", index=False)

    print("==== –ò—Ç–æ–≥ ====")
    print(df[["name", "date"]])
    return df.to_dict("records")


class StatsWindow(QMainWindow):
    def __init__(self, imports_count, parent=None):
        super().__init__(parent)
        self.imports_count = imports_count
        self.init_ui()
        self.setup_styles()
        
    def init_ui(self):
        self.setWindowTitle("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º")
        self.setGeometry(200, 200, 1000, 700)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        main_layout = QVBoxLayout(central_widget)
        
        # –í–µ—Ä—Ö–Ω—è—è —Å–≤–æ–¥–∫–∞
        summary_frame = QFrame()
        summary_layout = QVBoxLayout(summary_frame)
        
        self.summary_label = QLabel("üì¶ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤")
        self.summary_label.setAlignment(Qt.AlignCenter)
        self.summary_label.setFont(QFont("Arial", 14, QFont.Bold))
        summary_layout.addWidget(self.summary_label)
        
        main_layout.addWidget(summary_frame)
        
        # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.tab_widget = QTabWidget()
        
        # –¢–∞–± —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        self.charts_tab = self.create_charts_tab()
        self.tab_widget.addTab(self.charts_tab, "üìä –ì—Ä–∞—Ñ–∏–∫–∏")
        
        # –¢–∞–± —Å —Ç–∞–±–ª–∏—Ü–µ–π
        self.table_tab = self.create_table_tab()
        self.tab_widget.addTab(self.table_tab, "üìã –¢–∞–±–ª–∏—Ü–∞")
        
        # –¢–∞–± —Å –¥–µ—Ç–∞–ª—è–º–∏
        self.details_tab = self.create_details_tab()
        self.tab_widget.addTab(self.details_tab, "üìù –î–µ—Ç–∞–ª–∏")
        
        main_layout.addWidget(self.tab_widget)
        
        # –ö–Ω–æ–ø–∫–∏
        button_layout = QHBoxLayout()
        
        self.export_btn = QPushButton("üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV")
        self.export_btn.clicked.connect(self.export_to_csv)
        
        self.close_btn = QPushButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å")
        self.close_btn.clicked.connect(self.close)
        
        button_layout.addWidget(self.export_btn)
        button_layout.addStretch()
        button_layout.addWidget(self.close_btn)
        
        main_layout.addLayout(button_layout)
        
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #2b2b2b;
                color: #ffffff;
            }
            QTabWidget::pane {
                border: 1px solid #444444;
                background-color: #1e1e1e;
            }
            QTabBar::tab {
                background-color: #3c3c3c;
                color: #ffffff;
                padding: 8px 16px;
                margin-right: 2px;
            }
            QTabBar::tab:selected {
                background-color: #4a90e2;
            }
            QPushButton {
                background-color: #4a90e2;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #357abd;
            }
            QLabel {
                color: #ffffff;
            }
            QTableWidget {
                background-color: #1e1e1e;
                color: #ffffff;
                gridline-color: #444444;
            }
            QTextEdit {
                background-color: #1e1e1e;
                color: #ffffff;
                border: 1px solid #444444;
            }
        """)
        
    def create_charts_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ì—Ä–∞—Ñ–∏–∫ –∏–º–ø–æ—Ä—Ç–æ–≤
        self.imports_chart = self.create_imports_chart()
        layout.addWidget(self.imports_chart)
        
        return widget
        
    def create_table_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        self.table = QTableWidget()
        self.populate_table()
        layout.addWidget(self.table)
        
        return widget
        
    def create_details_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        self.details_text = QTextEdit()
        self.details_text.setReadOnly(True)
        self.populate_details()
        layout.addWidget(self.details_text)
        
        return widget
        
    def create_imports_chart(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        if not self.imports_count:
            label = QLabel("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            label.setAlignment(Qt.AlignCenter)
            return label
            
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig, ax = plt.subplots(figsize=(10, 6))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        sorted_imports = sorted(self.imports_count.items(), 
                               key=lambda x: x[1], reverse=True)[:20]
        
        libraries = [lib for lib, _ in sorted_imports]
        counts = [count for _, count in sorted_imports]
        
        # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
        bars = ax.barh(libraries, counts, color='skyblue', edgecolor='black')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
        ax.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π')
        ax.set_title('–¢–æ–ø-20 –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫')
        ax.grid(True, axis='x', linestyle='--', alpha=0.7)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for i, (bar, count) in enumerate(zip(bars, counts)):
            ax.text(bar.get_width() + 0.1, bar.get_y() + bar.get_height()/2, 
                   str(count), va='center')
        
        plt.tight_layout()
        
        # –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è Qt
        canvas = FigureCanvas(fig)
        return canvas
        
    def populate_table(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã–º–∏"""
        if not self.imports_count:
            return
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        sorted_imports = sorted(self.imports_count.items(), 
                               key=lambda x: x[1], reverse=True)
        
        self.table.setRowCount(len(sorted_imports))
        self.table.setColumnCount(3)
        self.table.setHorizontalHeaderLabels(['–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '%'])
        
        total = sum(self.imports_count.values())
        
        for i, (lib, count) in enumerate(sorted_imports):
            percentage = (count / total) * 100
            
            self.table.setItem(i, 0, QTableWidgetItem(lib))
            self.table.setItem(i, 1, QTableWidgetItem(str(count)))
            self.table.setItem(i, 2, QTableWidgetItem(f"{percentage:.2f}%"))
            
        self.table.resizeColumnsToContents()
        
    def populate_details(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if not self.imports_count:
            self.details_text.setText("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
            
        total = sum(self.imports_count.values())
        unique_libs = len(self.imports_count)
        
        details = f"""
üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ú–ü–û–†–¢–û–í

üìà –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –í—Å–µ–≥–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {total:,}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫: {unique_libs}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {total/unique_libs:.1f}

üèÜ –¢–æ–ø-10 –±–∏–±–ª–∏–æ—Ç–µ–∫:
"""
        
        sorted_imports = sorted(self.imports_count.items(), 
                               key=lambda x: x[1], reverse=True)[:10]
        
        for i, (lib, count) in enumerate(sorted_imports, 1):
            percentage = (count / total) * 100
            details += f"{i:2d}. {lib:<20} {count:>6} ({percentage:>5.1f}%)\n"
            
        self.details_text.setText(details)
        
    def export_to_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
        if not self.imports_count:
            return
            
        import pandas as pd
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        data = []
        total = sum(self.imports_count.values())
        
        for lib, count in self.imports_count.items():
            percentage = (count / total) * 100
            data.append({
                '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞': lib,
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count,
                '–ü—Ä–æ—Ü–µ–Ω—Ç': round(percentage, 2)
            })
            
        df = pd.DataFrame(data)
        df = df.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', ascending=False)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        filename = f"imports_analysis_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        df.to_csv(filename, index=False, encoding='utf-8-sig')
        
        from PySide6.QtWidgets import QMessageBox
        QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")


def open_stats_window(parent, imports_count):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats_window = StatsWindow(imports_count, parent)
    stats_window.show()
    return stats_window

