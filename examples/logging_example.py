"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from core.logging_config import setup_logging, get_logger, LogConfig
from core.configuration import Configuration
from core.scan_service import ScanService


def example_basic_logging():
    """–ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=== –ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    config = LogConfig(
        level="DEBUG",
        format="text",
        file_enabled=True,
        console_enabled=True,
        log_dir="example_logs"
    )
    setup_logging(config)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
    logger = get_logger("Example")
    
    # –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    logger.debug("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    logger.warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
    logger.error("–û—à–∏–±–∫–∞")
    
    print("–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 'example_logs'")


def example_context_logging():
    """–ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    print("\n=== –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º ===")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
    config = LogConfig(
        level="INFO",
        format="json",
        file_enabled=True,
        console_enabled=False,
        log_dir="example_logs"
    )
    setup_logging(config)
    
    logger = get_logger("ContextExample")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞", 
               extra_data={
                   "file_path": "/path/to/file.py",
                   "file_size": 1024,
                   "processing_time": 1.23,
                   "status": "success"
               })
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    try:
        raise ValueError("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ", 
                    extra_data={
                        "error_type": type(e).__name__,
                        "error_message": str(e),
                        "file_path": "/path/to/file.py"
                    })
    
    print("–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ")


def example_scan_service_logging():
    """–ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ ScanService"""
    print("\n=== –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ ScanService ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    config = Configuration()
    config.update_logging_config("level", "INFO")
    config.update_logging_config("format", "text")
    config.update_logging_config("log_dir", "example_logs")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
    service = ScanService(config)
    
    # –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–±—É–¥–µ—Ç –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞)
    try:
        # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        result = service.scan_directory(Path("."))
        print(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {result.total_files_scanned} —Ñ–∞–π–ª–æ–≤")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    print("–õ–æ–≥–∏ ScanService —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")


def example_log_analysis():
    """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤"""
    print("\n=== –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤ ===")
    
    import json
    from collections import defaultdict
    
    log_file = Path("example_logs/app_20240115.log")
    
    if log_file.exists():
        stats = defaultdict(int)
        
        with open(log_file, 'r', encoding='utf-8') as f:
            for line in f:
                if line.strip():
                    try:
                        data = json.loads(line)
                        stats["total_entries"] += 1
                        stats[data["level"]] += 1
                        
                        if "logger" in data:
                            stats[f"logger_{data['logger']}"] += 1
                            
                    except json.JSONDecodeError:
                        continue
        
        print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤:")
        for key, value in stats.items():
            print(f"  {key}: {value}")
    else:
        print("–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞"""
    print("üöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è\n")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    log_dir = Path("example_logs")
    log_dir.mkdir(exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    example_basic_logging()
    example_context_logging()
    example_scan_service_logging()
    example_log_analysis()
    
    print("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
    print("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é 'example_logs' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤")


if __name__ == "__main__":
    main()
