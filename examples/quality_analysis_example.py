#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ PEP8, —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
"""
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from core.code_quality_analyzer import CodeQualityAnalyzer
from core.scan_service import ScanService
from core.configuration import Configuration


def print_file_quality_report(report):
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ —Ñ–∞–π–ª–∞"""
    print(f"\n{'='*80}")
    print(f"–û–¢–ß–ï–¢ –û –ö–ê–ß–ï–°–¢–í–ï –ö–û–î–ê: {report.file_path.name}")
    print(f"{'='*80}")
    print(f"–û–±—â–∏–π –±–∞–ª–ª: {report.overall_score:.1f}/100")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º: {report.issues_count}")
    
    # PEP8 –Ω–∞—Ä—É—à–µ–Ω–∏—è
    if report.pep8_violations:
        print(f"\nüî¥ PEP8 –ù–ê–†–£–®–ï–ù–ò–Ø ({len(report.pep8_violations)}):")
        for violation in report.pep8_violations[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"  –°—Ç—Ä–æ–∫–∞ {violation.line_number}: {violation.message} ({violation.code})")
        if len(report.pep8_violations) > 5:
            print(f"  ... –∏ –µ—â–µ {len(report.pep8_violations) - 5} –Ω–∞—Ä—É—à–µ–Ω–∏–π")
    
    # –ö–∞—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π
    if report.functions_quality:
        print(f"\nüìä –ö–ê–ß–ï–°–¢–í–û –§–£–ù–ö–¶–ò–ô ({len(report.functions_quality)}):")
        for func in report.functions_quality:
            print(f"  {func.name} (—Å—Ç—Ä–æ–∫–∞ {func.line_number}):")
            print(f"    –¶–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {func.cyclomatic_complexity}")
            print(f"    –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {func.cognitive_complexity}")
            print(f"    –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {func.lines_of_code}")
            print(f"    –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {func.parameters_count}")
            print(f"    –ì–ª—É–±–∏–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏: {func.nesting_depth}")
            if func.issues:
                print(f"    ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(func.issues)}")
    
    # –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    complex_functions = [c for c in report.cognitive_complexity if c.complexity > 10]
    if complex_functions:
        print(f"\nüß† –í–´–°–û–ö–ê–Ø –ö–û–ì–ù–ò–¢–ò–í–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨:")
        for func in complex_functions:
            print(f"  {func.function_name}: {func.complexity} (—Ñ–∞–∫—Ç–æ—Ä—ã: {', '.join(func.factors)})")
    
    # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
    if report.code_duplications:
        print(f"\nüîÑ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –ö–û–î–ê:")
        for dup in report.code_duplications[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"  {dup.occurrences} –≤—Ö–æ–∂–¥–µ–Ω–∏–π (—Å—Ç—Ä–æ–∫–∏: {dup.lines})")
            print(f"    –°—Ö–æ–∂–µ—Å—Ç—å: {dup.similarity:.2f}")
            print(f"    –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {dup.content[:100]}...")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if report.recommendations:
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in report.recommendations:
            print(f"  ‚Ä¢ {rec}")


def print_project_quality_report(report):
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    print(f"\n{'='*80}")
    print(f"–û–¢–ß–ï–¢ –û –ö–ê–ß–ï–°–¢–í–ï –ü–†–û–ï–ö–¢–ê")
    print(f"{'='*80}")
    print(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {report.total_files}")
    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º: {report.total_issues}")
    print(f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {report.average_score:.1f}/100")
    
    # –•—É–¥—à–∏–µ —Ñ–∞–π–ª—ã
    if report.worst_files:
        print(f"\nüî¥ –•–£–î–®–ò–ï –§–ê–ô–õ–´:")
        for file in report.worst_files:
            print(f"  ‚Ä¢ {file}")
    
    # –õ—É—á—à–∏–µ —Ñ–∞–π–ª—ã
    if report.best_files:
        print(f"\n‚úÖ –õ–£–ß–®–ò–ï –§–ê–ô–õ–´:")
        for file in report.best_files:
            print(f"  ‚Ä¢ {file}")
    
    # –°–∞–º—ã–µ —Å–ª–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if report.most_complex_functions:
        print(f"\nüß† –°–ê–ú–´–ï –°–õ–û–ñ–ù–´–ï –§–£–ù–ö–¶–ò–ò:")
        for func in report.most_complex_functions[:5]:
            print(f"  ‚Ä¢ {func}")
    
    # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if report.duplicate_blocks:
        print(f"\nüîÑ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ö–û–î–ê:")
        for dup in report.duplicate_blocks[:5]:
            print(f"  ‚Ä¢ {dup}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if report.recommendations:
        print(f"\nüí° –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in report.recommendations:
            print(f"  ‚Ä¢ {rec}")


def create_test_file_with_issues():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
    test_file = Path("test_quality_issues.py")
    
    content = '''#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
"""

import os,sys  # PEP8: E401 - multiple imports on one line
from pathlib import Path

# PEP8: E501 - line too long
def very_long_function_name_with_many_parameters(param1,param2,param3,param4,param5,param6,param7,param8,param9,param10):
    """–§—É–Ω–∫—Ü–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤—ã—Å–æ–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é"""
    result = 0
    if param1 > 0:
        if param2 > 10:
            if param3 > 100:
                if param4 > 1000:
                    if param5 > 10000:
                        if param6 > 100000:
                            if param7 > 1000000:
                                if param8 > 10000000:
                                    if param9 > 100000000:
                                        if param10 > 1000000000:
                                            result = 1
                                        else:
                                            result = 2
                                    else:
                                        result = 3
                                else:
                                    result = 4
                            else:
                                result = 5
                        else:
                            result = 6
                    else:
                        result = 7
                else:
                    result = 8
            else:
                result = 9
        else:
            result = 10
    else:
        result = 11
    
    # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    for i in range(10):
        if i % 2 == 0:
            print(f"Even: {i}")
        else:
            print(f"Odd: {i}")
    
    # –ï—â–µ –æ–¥–∏–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫
    for i in range(10):
        if i % 2 == 0:
            print(f"Even: {i}")
        else:
            print(f"Odd: {i}")
    
    return result

def another_complex_function(x, y, z):
    """–ï—â–µ –æ–¥–Ω–∞ —Å–ª–æ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        if x > 0 and y > 0 and z > 0:
            if x + y > z:
                if x + z > y:
                    if y + z > x:
                        return True
                    else:
                        return False
                else:
                    return False
            else:
                return False
        else:
            return False
    except Exception:
        return False

class ComplexClass:
    def __init__(self):
        self.value = 42
    
    def complex_method(self, data):
        """–°–ª–æ–∂–Ω—ã–π –º–µ—Ç–æ–¥ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏"""
        result = []
        for item in data:
            if isinstance(item, str):
                if len(item) > 10:
                    if item.startswith('test'):
                        if item.endswith('ing'):
                            result.append(item.upper())
                        else:
                            result.append(item.lower())
                    else:
                        result.append(item)
                else:
                    result.append(item[:5])
            elif isinstance(item, int):
                if item > 100:
                    if item % 2 == 0:
                        result.append(item * 2)
                    else:
                        result.append(item // 2)
                else:
                    result.append(item)
            else:
                result.append(str(item))
        return result

# PEP8: W291 - trailing whitespace
def function_with_trailing_whitespace():    
    return "This line has trailing spaces"    

# PEP8: E111 - indentation not multiple of 4
def function_with_bad_indentation():
   return "This has bad indentation"

if __name__ == "__main__":
    # PEP8: E701 - multiple statements on one line
    x = 1; y = 2; z = 3
    
    # PEP8: E711 - comparison to None
    if x == None:
        print("x is None")
    
    # PEP8: E722 - bare except
    try:
        result = 1 / 0
    except:
        print("Error occurred")
    
    print("Test completed")
'''
    
    with open(test_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    return test_file


def analyze_sample_file():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
    print("üîç –ê–ù–ê–õ–ò–ó –¢–ï–°–¢–û–í–û–ì–û –§–ê–ô–õ–ê –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò")
    print("="*60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    test_file = create_test_file_with_issues()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
    analyzer = CodeQualityAnalyzer()
    report = analyzer.analyze_file(test_file)
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print_file_quality_report(report)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    test_file.unlink()
    print(f"\nüóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")


def analyze_current_project():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç"""
    print("\nüîç –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –¢–ï–ö–£–©–ï–ì–û –ü–†–û–ï–ö–¢–ê")
    print("="*60)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        config = Configuration()
        service = ScanService(config)
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞
        project_dir = Path(__file__).parent.parent
        report = service.analyze_project_quality(project_dir)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print_project_quality_report(report)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞: {e}")


def analyze_specific_files():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    print("\nüîç –ê–ù–ê–õ–ò–ó –ö–û–ù–ö–†–ï–¢–ù–´–• –§–ê–ô–õ–û–í")
    print("="*60)
    
    analyzer = CodeQualityAnalyzer()
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    files_to_analyze = [
        "src/core/scan_service.py",
        "src/core/complexity_analyzer.py",
        "src/core/code_quality_analyzer.py"
    ]
    
    for file_path in files_to_analyze:
        path = Path(file_path)
        if path.exists():
            print(f"\nüìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
            try:
                report = analyzer.analyze_file(path)
                print(f"  –ë–∞–ª–ª: {report.overall_score:.1f}/100")
                print(f"  –ü—Ä–æ–±–ª–µ–º: {report.issues_count}")
                print(f"  –§—É–Ω–∫—Ü–∏–π: {len(report.functions_quality)}")
                print(f"  PEP8 –Ω–∞—Ä—É—à–µ–Ω–∏–π: {len(report.pep8_violations)}")
                print(f"  –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π: {len(report.code_duplications)}")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            print(f"  ‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê")
    print("="*60)
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞:")
    print("‚Ä¢ PEP8 –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print("‚Ä¢ –¶–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å")
    print("‚Ä¢ –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å")
    print("‚Ä¢ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞")
    print("‚Ä¢ –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    analyze_sample_file()
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    analyze_specific_files()
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    analyze_current_project()
    
    print(f"\n{'='*60}")
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞")


if __name__ == "__main__":
    main()
