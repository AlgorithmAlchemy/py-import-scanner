"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""
import sys
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from core.security import SecurityConfig, SecurityManager
from core.configuration import Configuration


def demonstrate_security_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("üîí –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Python Import Parser")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    security_config = SecurityConfig(
        max_file_size=1024,  # 1KB –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        max_files_per_scan=10,
        max_total_size=2048,
        check_for_malicious_patterns=True,
        validate_imports=True,
        sanitize_content=True
    )
    
    print(f"   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {security_config.max_file_size} –±–∞–π—Ç")
    print(f"   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {security_config.max_files_per_scan}")
    print(f"   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–ª–æ–Ω–∞–º–µ—Ä–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {security_config.check_for_malicious_patterns}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print("\n2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    security_manager = SecurityManager(security_config)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–µ–π
    print("\n3. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–µ–π —Ñ–∞–π–ª–æ–≤")
    test_paths = [
        "normal_file.py",
        "path/with/../traversal.py",
        "/absolute/path/file.py",
        "file_with_blocked_pattern/__pycache__/file.py",
        "file_with_wrong_extension.txt"
    ]
    
    for path in test_paths:
        is_valid, message = security_manager.validator.validate_file_path(Path(path))
        status = "‚úÖ" if is_valid else "‚ùå"
        print(f"   {status} {path}: {message}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    print("\n4. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤")
    test_contents = [
        "import os\nimport sys\n",  # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        "eval('print(\"hello\")')",  # –ó–ª–æ–Ω–∞–º–µ—Ä–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        "import os\n" * 1001,  # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–æ–≤
        "line_with_very_long_content_" * 1000,  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    ]
    
    with tempfile.NamedTemporaryFile(suffix='.py', delete=False) as f:
        temp_file = Path(f.name)
    
    try:
        for i, content in enumerate(test_contents, 1):
            is_valid, message, sanitized = security_manager.validate_and_sanitize_content(content, temp_file)
            status = "‚úÖ" if is_valid else "‚ùå"
            print(f"   {status} –¢–µ—Å—Ç {i}: {message}")
            if not is_valid:
                print(f"      –û—à–∏–±–∫–∞: {message}")
    finally:
        if temp_file.exists():
            temp_file.unlink()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
    print("\n5. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤")
    test_imports = [
        ["os", "sys", "json"],  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        ["pickle", "subprocess"],  # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        ["123invalid", "class"],  # –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∏–º–µ–Ω–∞
        ["very_long_import_name_" * 10],  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è
    ]
    
    for i, imports in enumerate(test_imports, 1):
        is_valid, message = security_manager.validate_imports(imports, temp_file)
        status = "‚úÖ" if is_valid else "‚ùå"
        print(f"   {status} –¢–µ—Å—Ç {i}: {message}")
        if not is_valid:
            print(f"      –û—à–∏–±–∫–∞: {message}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏
    print("\n6. –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ")
    dirty_content = "import os\x00\n\r\nimport sys\r\n  "
    sanitized = security_manager.validator.sanitize_content(dirty_content)
    
    print(f"   –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {repr(dirty_content)}")
    print(f"   –°–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ: {repr(sanitized)}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    print("\n7. –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤")
    with tempfile.NamedTemporaryFile(delete=False) as f:
        f.write(b"test content for hashing")
        temp_file = Path(f.name)
    
    try:
        file_hash = security_manager.get_file_hash(temp_file)
        print(f"   –•–µ—à —Ñ–∞–π–ª–∞: {file_hash}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        file_hash2 = security_manager.get_file_hash(temp_file)
        print(f"   –•–µ—à –∏–∑ –∫—ç—à–∞: {file_hash2}")
        print(f"   –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {file_hash == file_hash2}")
    finally:
        if temp_file.exists():
            temp_file.unlink()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print("\n8. –û—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    report = security_manager.get_security_report()
    
    print("   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
    for key, value in report.items():
        if key != "security_config":
            print(f"     {key}: {value}")
    
    print("\n   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
    for key, value in report["security_config"].items():
        print(f"     {key}: {value}")


def demonstrate_integration_with_configuration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = Configuration()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print("\n1. –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
    security_config = config.get_security_config()
    for key, value in security_config.items():
        print(f"   {key}: {value}")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print("\n2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
    config.update_security_config("max_file_size", 1024 * 1024)  # 1MB
    config.update_security_config("check_for_malicious_patterns", False)
    
    print("   - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 1MB")
    print("   - –û—Ç–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–ª–æ–Ω–∞–º–µ—Ä–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    print("\n3. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    updated_config = config.get_security_config()
    print(f"   max_file_size: {updated_config['max_file_size']}")
    print(f"   check_for_malicious_patterns: {updated_config['check_for_malicious_patterns']}")


def demonstrate_security_validation_flow():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\nüîÑ –ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        (temp_path / "safe_file.py").write_text("import os\nimport sys\n")
        (temp_path / "malicious_file.py").write_text("eval('print(\"hello\")')\n")
        (temp_path / "large_file.py").write_text("import os\n" * 1001)
        
        print(f"–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_path}")
        print("–°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã:")
        print("  - safe_file.py (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π)")
        print("  - malicious_file.py (–∑–ª–æ–Ω–∞–º–µ—Ä–µ–Ω–Ω—ã–π)")
        print("  - large_file.py (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–æ–≤)")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_config = SecurityConfig(
            max_file_size=1024,
            max_files_per_scan=5,
            max_total_size=2048,
            check_for_malicious_patterns=True,
            validate_imports=True,
            sanitize_content=True
        )
        security_manager = SecurityManager(security_config)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\n1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:")
        is_valid, message = security_manager.validate_scan_request(temp_path)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {message}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
        print("\n2. –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
        for py_file in temp_path.glob("*.py"):
            print(f"\n   –§–∞–π–ª: {py_file.name}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
            is_valid, message = security_manager.validate_file(py_file)
            print(f"     –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞: {'‚úÖ' if is_valid else '‚ùå'} {message}")
            
            if is_valid:
                # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                content = py_file.read_text()
                is_valid, message, sanitized = security_manager.validate_and_sanitize_content(content, py_file)
                print(f"     –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {'‚úÖ' if is_valid else '‚ùå'} {message}")
                
                if is_valid:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤
                    imports = ["os", "sys"]
                    is_valid, message = security_manager.validate_imports(imports, py_file)
                    print(f"     –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤: {'‚úÖ' if is_valid else '‚ùå'} {message}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\n3. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
        report = security_manager.get_security_report()
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {report['files_processed']}")
        print(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {report['total_size_processed']} –±–∞–π—Ç")
        print(f"   –í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {report['scan_duration']:.2f} —Å–µ–∫")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        demonstrate_security_features()
        demonstrate_integration_with_configuration()
        demonstrate_security_validation_flow()
        
        print("\n" + "=" * 60)
        print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\n–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print("  - –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–µ–π —Ñ–∞–π–ª–æ–≤ (–∑–∞—â–∏—Ç–∞ –æ—Ç path traversal)")
        print("  - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∑–ª–æ–Ω–∞–º–µ—Ä–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        print("  - –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤")
        print("  - –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ")
        print("  - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤")
        print("  - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("  - –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
