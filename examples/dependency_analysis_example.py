"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ requirements.txt, –ø–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π, –∞–Ω–∞–ª–∏–∑ –ª–∏—Ü–µ–Ω–∑–∏–π –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent.parent / 'src'))

from core.dependency_analyzer import DependencyAnalyzer, DependencyReport
from core.scan_service import ScanService


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞"""
    print("üîç –ê–ù–ê–õ–ò–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    analyzer = DependencyAnalyzer()
    
    # –ü—É—Ç—å –∫ requirements.txt
    requirements_path = Path("requirements.txt")
    
    if not requirements_path.exists():
        print(f"‚ùå –§–∞–π–ª {requirements_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª requirements.txt...")
        create_test_requirements(requirements_path)
    
    try:
        # –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        print(f"üì¶ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {requirements_path}...")
        report = analyzer.analyze_requirements(requirements_path)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print_results(report)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤
        export_reports(analyzer, report)
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ ScanService
        print("\n" + "=" * 50)
        print("üîß –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ß–ï–†–ï–ó SCANSERVICE")
        print("=" * 50)
        
        scan_service = ScanService()
        service_report = scan_service.analyze_dependencies(requirements_path)
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ ScanService –∑–∞–≤–µ—Ä—à–µ–Ω:")
        print(f"   - –í—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤: {service_report.total_packages}")
        print(f"   - –£—è–∑–≤–∏–º—ã—Ö: {service_report.vulnerable_packages}")
        print(f"   - –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö: {service_report.outdated_count}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ ScanService
        output_path = Path("dependency_report_service.json")
        scan_service.export_dependency_report(service_report, output_path, 'json')
        print(f"üìÑ –û—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {output_path}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        import traceback
        traceback.print_exc()


def create_test_requirements(requirements_path: Path) -> None:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª requirements.txt"""
    test_requirements = """# –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
requests>=2.25.0
numpy==1.21.0
pandas>=1.3.0
matplotlib>=3.4.0
PySide6>=6.0.0
# –î—É–±–ª–∏—Ä—É—é—â–∞—è—Å—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
requests>=2.28.0
"""
    
    with open(requirements_path, 'w', encoding='utf-8') as f:
        f.write(test_requirements)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª {requirements_path}")


def print_results(report: DependencyReport) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê")
    print("-" * 30)
    print(f"–í—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤: {report.total_packages}")
    print(f"–£—è–∑–≤–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: {report.vulnerable_packages}")
    print(f"–£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤: {report.outdated_count}")
    print(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ª–∏—Ü–µ–Ω–∑–∏–π: {report.license_conflicts}")
    print(f"–î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {report.duplicates_count}")
    
    # –î–µ—Ç–∞–ª–∏ –ø–æ –ø–∞–∫–µ—Ç–∞–º
    if report.packages:
        print(f"\nüì¶ –ü–ê–ö–ï–¢–´:")
        print("-" * 20)
        for package in report.packages:
            status = []
            if package.is_outdated:
                status.append("üü° –£—Å—Ç–∞—Ä–µ–ª")
            if any(v.package_name == package.name for v in report.vulnerabilities):
                status.append("üî¥ –£—è–∑–≤–∏–º")
            
            status_str = " | ".join(status) if status else "‚úÖ OK"
            print(f"  {package.name} {package.version} - {status_str}")
    
    # –£—è–∑–≤–∏–º–æ—Å—Ç–∏
    if report.vulnerabilities:
        print(f"\nüî¥ –£–Ø–ó–í–ò–ú–û–°–¢–ò:")
        print("-" * 20)
        for vuln in report.vulnerabilities:
            print(f"  {vuln.package_name} ({vuln.severity}): {vuln.description}")
    
    # –î—É–±–ª–∏–∫–∞—Ç—ã
    if report.duplicate_dependencies:
        print(f"\nüîÑ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:")
        print("-" * 30)
        for dup in report.duplicate_dependencies:
            print(f"  {dup.package_name}:")
            print(f"    –í–µ—Ä—Å–∏–∏: {', '.join(dup.versions)}")
            print(f"    –§–∞–π–ª—ã: {', '.join(dup.locations)}")
            print(f"    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {dup.recommendation}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if report.recommendations:
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("-" * 20)
        for rec in report.recommendations:
            print(f"  {rec}")


def export_reports(analyzer: DependencyAnalyzer, report: DependencyReport) -> None:
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
    print(f"\nüìÑ –≠–ö–°–ü–û–†–¢ –û–¢–ß–ï–¢–û–í")
    print("-" * 20)
    
    formats = ['json', 'csv', 'txt']
    
    for fmt in formats:
        output_path = Path(f"dependency_report.{fmt}")
        try:
            analyzer.export_report(report, output_path, fmt)
            print(f"  ‚úÖ {fmt.upper()}: {output_path}")
        except Exception as e:
            print(f"  ‚ùå {fmt.upper()}: {e}")


if __name__ == "__main__":
    main()
