"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
from core.patterns import (
    ComponentFactory, ComponentType, ScanningStrategyFactory,
    ScanSubject, ProgressObserver, LoggingObserver, MetricsObserver,
    ScanConfigurationBuilder, ScanConfiguration
)


def example_factory_pattern():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Factory –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
    print("\n=== Factory Pattern Example ===")
    
    try:
        from core.configuration import Configuration
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = Configuration()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        factory = ComponentFactory(config)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
        import_parser = factory.create_component(ComponentType.IMPORT_PARSER)
        file_scanner = factory.create_component(ComponentType.FILE_SCANNER)
        security_manager = factory.create_component(ComponentType.SECURITY_MANAGER)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω ImportParser: {type(import_parser).__name__}")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω FileScanner: {type(file_scanner).__name__}")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω SecurityManager: {type(security_manager).__name__}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        existing_parser = factory.get_component(ComponentType.IMPORT_PARSER)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä—Å–µ—Ä: {existing_parser is import_parser}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ Factory Pattern: {e}")


def example_strategy_pattern():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Strategy –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
    print("\n=== Strategy Pattern Example ===")
    
    try:
        from core.configuration import Configuration
        from core.import_parser import ImportParser
        from core.project_analyzer import ProjectAnalyzer
        from core.file_scanner import FileScanner
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        config = Configuration()
        import_parser = ImportParser(config)
        project_analyzer = ProjectAnalyzer(config)
        file_scanner = FileScanner(config, import_parser, project_analyzer)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        sequential_strategy = ScanningStrategyFactory.create_strategy(
            "sequential", file_scanner, import_parser, project_analyzer
        )
        parallel_strategy = ScanningStrategyFactory.create_strategy(
            "parallel", file_scanner, import_parser, project_analyzer
        )
        adaptive_strategy = ScanningStrategyFactory.create_strategy(
            "adaptive", file_scanner, import_parser, project_analyzer
        )
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {type(sequential_strategy).__name__}")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {type(parallel_strategy).__name__}")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {type(adaptive_strategy).__name__}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ Strategy Pattern: {e}")


def example_observer_pattern():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Observer –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
    print("\n=== Observer Pattern Example ===")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–±—ä–µ–∫—Ç–∞
        subject = ScanSubject()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        progress_messages = []
        def progress_callback(msg):
            progress_messages.append(msg)
            print(f"Progress: {msg}")
        
        progress_observer = ProgressObserver(progress_callback)
        logging_observer = LoggingObserver()
        metrics_observer = MetricsObserver()
        
        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        subject.attach(progress_observer)
        subject.attach(logging_observer)
        subject.attach(metrics_observer)
        
        print("‚úÖ –ù–∞–±–ª—é–¥–∞—Ç–µ–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω—ã –∫ —Å—É–±—ä–µ–∫—Ç—É")
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        print("\nüì° –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
        
        subject.notify_all("scan_started", {
            "directory": "/test/path",
            "strategy": "adaptive"
        })
        
        subject.notify_all("file_processed", {
            "file": "test.py",
            "imports_count": 5
        })
        
        subject.notify_all("file_processed", {
            "file": "main.py",
            "imports_count": 10
        })
        
        subject.notify_all("scan_completed", {
            "total_files": 2,
            "total_imports": 15,
            "duration": 1.5
        })
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        metrics = metrics_observer.get_metrics()
        print(f"\nüìä –°–æ–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {metrics}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ Observer Pattern: {e}")


def example_builder_pattern():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Builder –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
    print("\n=== Builder Pattern Example ===")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Builder
        config_builder = ScanConfigurationBuilder()
        
        config = (config_builder
                  .with_strategy("parallel")
                  .with_parallel(True)
                  .with_max_workers(8)
                  .with_progress_callback(lambda msg: print(f"Builder Progress: {msg}"))
                  .with_logging(True)
                  .with_metrics(True)
                  .with_components(["file", "project", "security"])
                  .build())
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ Builder:")
        print(f"  üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {config.strategy_type}")
        print(f"  üîÑ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {config.enable_parallel}")
        print(f"  üßµ –ú–∞–∫—Å–∏–º—É–º –ø–æ—Ç–æ–∫–æ–≤: {config.max_workers}")
        print(f"  üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {config.enable_logging}")
        print(f"  üìä –ú–µ—Ç—Ä–∏–∫–∏: {config.enable_metrics}")
        print(f"  üß© –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {config.scan_components}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ Builder Pattern: {e}")


def example_composite_pattern():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Composite –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
    print("\n=== Composite Pattern Example ===")
    
    try:
        from core.patterns import FileScanComponent, DirectoryScanComponent
        from core.configuration import Configuration
        from core.file_scanner import FileScanner
        from core.import_parser import ImportParser
        from core.project_analyzer import ProjectAnalyzer
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        config = Configuration()
        import_parser = ImportParser(config)
        project_analyzer = ProjectAnalyzer(config)
        file_scanner = FileScanner(config, import_parser, project_analyzer)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        file_component = FileScanComponent(file_scanner)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        directory_component = DirectoryScanComponent([file_component])
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–∞–π–ª–∞: {file_component.get_name()}")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {directory_component.get_name()}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ
        test_file = Path(__file__)
        if test_file.exists():
            try:
                result = file_component.scan(test_file)
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {result['type']} - {result['imports_count']} –∏–º–ø–æ—Ä—Ç–æ–≤")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ Composite Pattern: {e}")


def example_patterns_integration():
    """–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    print("\n=== Patterns Integration Example ===")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–±—ä–µ–∫—Ç–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        subject = ScanSubject()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        progress_messages = []
        def custom_progress_callback(message):
            progress_messages.append(message)
            print(f"Custom Progress: {message}")
        
        custom_observer = ProgressObserver(custom_progress_callback)
        metrics_observer = MetricsObserver()
        
        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        subject.attach(custom_observer)
        subject.attach(metrics_observer)
        
        print("‚úÖ –ù–∞–±–ª—é–¥–∞—Ç–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Builder
        config_builder = (ScanConfigurationBuilder()
                         .with_strategy("adaptive")
                         .with_parallel(True)
                         .with_max_workers(4)
                         .with_metrics(True))
        
        config = config_builder.build()
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {config.strategy_type}")
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
        subject.notify_all("scan_started", {"directory": "/test"})
        subject.notify_all("file_processed", {"file": "test.py", "imports_count": 3})
        subject.notify_all("scan_completed", {"total_files": 1})
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {len(progress_messages)}")
        metrics = metrics_observer.get_metrics()
        print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏: {metrics['files_processed']} —Ñ–∞–π–ª–æ–≤, {metrics['total_imports']} –∏–º–ø–æ—Ä—Ç–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤—Å–µ—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    print("üöÄ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 70)
    
    # –ü—Ä–∏–º–µ—Ä—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    example_factory_pattern()
    example_strategy_pattern()
    example_observer_pattern()
    example_builder_pattern()
    example_composite_pattern()
    example_patterns_integration()
    
    print("\n" + "=" * 70)
    print("‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
    print("\nüìö –ü–∞—Ç—Ç–µ—Ä–Ω—ã —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ–¥—Ä–µ–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç:")
    print("  üè≠ Factory Pattern - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    print("  üéØ Strategy Pattern - —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("  üëÅÔ∏è Observer Pattern - —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è")
    print("  üß© Composite Pattern - –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏")
    print("  üî® Builder Pattern - –ø–æ—à–∞–≥–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
    
    print("\nüéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π!")


if __name__ == "__main__":
    main()
