#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
"""
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from core.code_quality_analyzer import CodeQualityAnalyzer


def print_file_quality_report(report):
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ —Ñ–∞–π–ª–∞"""
    print(f"\n{'='*60}")
    print(f"–û–¢–ß–ï–¢ –û –ö–ê–ß–ï–°–¢–í–ï: {report.file_path.name}")
    print(f"{'='*60}")
    print(f"–û–±—â–∏–π –±–∞–ª–ª: {report.overall_score:.1f}/100")
    print(f"–ü—Ä–æ–±–ª–µ–º: {report.issues_count}")
    
    # PEP8 –Ω–∞—Ä—É—à–µ–Ω–∏—è
    if report.pep8_violations:
        print(f"\nüî¥ PEP8 –ù–ê–†–£–®–ï–ù–ò–Ø ({len(report.pep8_violations)}):")
        for violation in report.pep8_violations[:3]:
            print(f"  –°—Ç—Ä–æ–∫–∞ {violation.line_number}: {violation.message}")
    
    # –ö–∞—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π
    if report.functions_quality:
        print(f"\nüìä –§–£–ù–ö–¶–ò–ò ({len(report.functions_quality)}):")
        for func in report.functions_quality:
            print(f"  {func.name}: CC={func.cyclomatic_complexity}, "
                  f"CogC={func.cognitive_complexity}, "
                  f"LOC={func.lines_of_code}")
            if func.issues:
                print(f"    ‚ö†Ô∏è {', '.join(func.issues)}")
    
    # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
    if report.code_duplications:
        print(f"\nüîÑ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø:")
        for dup in report.code_duplications[:2]:
            print(f"  {dup.occurrences} –≤—Ö–æ–∂–¥–µ–Ω–∏–π (—Å—Ç—Ä–æ–∫–∏: {dup.lines})")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if report.recommendations:
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in report.recommendations:
            print(f"  ‚Ä¢ {rec}")


def create_test_file_with_issues():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏"""
    test_file = Path("test_quality.py")
    
    content = '''#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
"""

import os,sys  # PEP8: E401
from pathlib import Path

def bad_function(param1,param2,param3,param4,param5,param6):
    """–§—É–Ω–∫—Ü–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤—ã—Å–æ–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é"""
    result = 0
    if param1 > 0:
        if param2 > 10:
            if param3 > 100:
                if param4 > 1000:
                    if param5 > 10000:
                        if param6 > 100000:
                            result = 1
                        else:
                            result = 2
                    else:
                        result = 3
                else:
                    result = 4
            else:
                result = 5
        else:
            result = 6
    else:
        result = 7
    
    # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    for i in range(10):
        if i % 2 == 0:
            print(f"Even: {i}")
        else:
            print(f"Odd: {i}")
    
    # –ï—â–µ –æ–¥–∏–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫
    for i in range(10):
        if i % 2 == 0:
            print(f"Even: {i}")
        else:
            print(f"Odd: {i}")
    
    return result

def another_bad_function(x,y,z):
    """–ï—â–µ –æ–¥–Ω–∞ –ø–ª–æ—Ö–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        if x>0 and y>0 and z>0:
            if x+y>z:
                if x+z>y:
                    if y+z>x:
                        return True
                    else:
                        return False
                else:
                    return False
            else:
                return False
        else:
            return False
    except Exception:
        return False

# PEP8: W291 - trailing whitespace
def function_with_whitespace():    
    return "trailing spaces"    

# PEP8: E111 - bad indentation
def function_with_bad_indent():
   return "bad indentation"

if __name__ == "__main__":
    # PEP8: E701 - multiple statements
    x=1; y=2; z=3
    
    # PEP8: E711 - comparison to None
    if x==None:
        print("x is None")
    
    # PEP8: E722 - bare except
    try:
        result = 1/0
    except:
        print("Error")
    
    print("Done")
'''
    
    with open(test_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    return test_file


def analyze_test_file():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
    print("üîç –ê–ù–ê–õ–ò–ó –¢–ï–°–¢–û–í–û–ì–û –§–ê–ô–õ–ê")
    print("="*50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    test_file = create_test_file_with_issues()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {test_file}")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
    analyzer = CodeQualityAnalyzer()
    report = analyzer.analyze_file(test_file)
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print_file_quality_report(report)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    test_file.unlink()
    print(f"\nüóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω")


def analyze_specific_files():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    print("\nüîç –ê–ù–ê–õ–ò–ó –ö–û–ù–ö–†–ï–¢–ù–´–• –§–ê–ô–õ–û–í")
    print("="*50)
    
    analyzer = CodeQualityAnalyzer()
    
    files_to_analyze = [
        "src/core/code_quality_analyzer.py",
        "src/core/complexity_analyzer.py"
    ]
    
    for file_path in files_to_analyze:
        path = Path(file_path)
        if path.exists():
            print(f"\nüìÑ {file_path}:")
            try:
                report = analyzer.analyze_file(path)
                print(f"  –ë–∞–ª–ª: {report.overall_score:.1f}/100")
                print(f"  –ü—Ä–æ–±–ª–µ–º: {report.issues_count}")
                print(f"  –§—É–Ω–∫—Ü–∏–π: {len(report.functions_quality)}")
                print(f"  PEP8: {len(report.pep8_violations)}")
                print(f"  –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π: {len(report.code_duplications)}")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            print(f"  ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω: {file_path}")


def analyze_small_project():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ–µ–∫—Ç"""
    print("\nüîç –ê–ù–ê–õ–ò–ó –ù–ï–ë–û–õ–¨–®–û–ì–û –ü–†–û–ï–ö–¢–ê")
    print("="*50)
    
    analyzer = CodeQualityAnalyzer()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
    import tempfile
    import shutil
    
    temp_dir = tempfile.mkdtemp()
    temp_path = Path(temp_dir)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤
        files_content = [
            ("good.py", "def good(): return True"),
            ("bad.py", "def bad(x,y,z):\n    if x>0:\n        if y>0:\n            if z>0:\n                return True\n    return False"),
            ("ugly.py", "def ugly(param1,param2,param3,param4,param5,param6,param7,param8):\n    x=1+2\n    if param1>0:\n        if param2>10:\n            if param3>100:\n                return 1\n    return 0")
        ]
        
        for name, content in files_content:
            file_path = temp_path / name
            with open(file_path, 'w') as f:
                f.write(content)
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
        report = analyzer.analyze_project(temp_path)
        
        print(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {report.total_files}")
        print(f"–û–±—â–∏—Ö –ø—Ä–æ–±–ª–µ–º: {report.total_issues}")
        print(f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {report.average_score:.1f}/100")
        
        if report.worst_files:
            print(f"–•—É–¥—à–∏–µ —Ñ–∞–π–ª—ã: {', '.join(report.worst_files)}")
        
        if report.best_files:
            print(f"–õ—É—á—à–∏–µ —Ñ–∞–π–ª—ã: {', '.join(report.best_files)}")
        
        if report.recommendations:
            print(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {', '.join(report.recommendations)}")
    
    finally:
        shutil.rmtree(temp_dir)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê")
    print("="*50)
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:")
    print("‚Ä¢ PEP8 –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print("‚Ä¢ –¶–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å")
    print("‚Ä¢ –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å")
    print("‚Ä¢ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞")
    print("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    analyze_test_file()
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    analyze_specific_files()
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–µ–±–æ–ª—å—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    analyze_small_project()
    
    print(f"\n{'='*50}")
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    main()
