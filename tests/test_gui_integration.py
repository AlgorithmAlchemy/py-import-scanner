#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π –≤ GUI
"""

import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from core.scan_service import ScanService
from core.configuration import Configuration
from core.complexity_analyzer import ComplexityAnalyzer
from core.patterns import ScanConfigurationBuilder
from core.logging_config import get_logger


def test_scan_service_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é ScanService —Å–æ –≤—Å–µ–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ScanService...")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        config = Configuration()
        service = ScanService(config)
        
        print("‚úÖ ScanService —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   - –§–∞–±—Ä–∏–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {type(service.component_factory).__name__}")
        print(f"   - –°—É–±—ä–µ–∫—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π: {type(service.scan_subject).__name__}")
        print(f"   - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {type(service.complexity_analyzer).__name__}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ScanService: {e}")
        return False


def test_patterns_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    try:
        # Factory Pattern
        config = Configuration()
        factory = service.component_factory
        
        import_parser = factory.create_component(factory.ComponentType.IMPORT_PARSER)
        print(f"‚úÖ Factory Pattern: —Å–æ–∑–¥–∞–Ω {type(import_parser).__name__}")
        
        # Strategy Pattern
        strategy_factory = service.ScanningStrategyFactory
        strategy = strategy_factory.create_strategy(
            "adaptive", service.file_scanner, service.import_parser, service.project_analyzer
        )
        print(f"‚úÖ Strategy Pattern: —Å–æ–∑–¥–∞–Ω–∞ {type(strategy).__name__}")
        
        # Observer Pattern
        subject = service.scan_subject
        print(f"‚úÖ Observer Pattern: —Å—É–±—ä–µ–∫—Ç {type(subject).__name__} –≥–æ—Ç–æ–≤")
        
        # Builder Pattern
        builder = ScanConfigurationBuilder()
        config = builder.with_strategy("parallel").with_max_workers(4).build()
        print(f"‚úÖ Builder Pattern: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
        return False


def test_complexity_analyzer_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏...")
    
    try:
        analyzer = ComplexityAnalyzer()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        test_file = Path("test_integration.py")
        test_content = '''
def simple_function():
    return "Hello, World!"

def complex_function(x):
    if x > 0:
        if x > 10:
            if x > 100:
                return "very large"
            else:
                return "large"
        else:
            return "small"
    else:
        return "negative"

class TestClass:
    def __init__(self):
        self.value = 42
    
    def get_value(self):
        return self.value
'''
        
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write(test_content)
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
        report = analyzer.analyze_file(test_file)
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –æ—Ü–µ–Ω–∫–∞ {report.grade}")
        print(f"   - –°–ª–æ–∂–Ω–æ—Å—Ç—å: {report.metrics.cyclomatic_complexity}")
        print(f"   - –§—É–Ω–∫—Ü–∏–π: {report.metrics.function_count}")
        print(f"   - –ö–ª–∞—Å—Å–æ–≤: {report.metrics.class_count}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        test_file.unlink()
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {e}")
        return False


def test_logging_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    try:
        logger = get_logger("TestIntegration")
        logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", extra_data={"test": True})
        print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def test_security_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    try:
        security_manager = service.security_manager
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
        test_file = Path("test_security.py")
        with open(test_file, 'w') as f:
            f.write("print('Hello')")
        
        is_valid, message = security_manager.validate_file(test_file)
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞: {is_valid} - {message}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        test_file.unlink()
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
        return False


def test_performance_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        performance_manager = service.performance_manager
        
        # –¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        performance_manager.start_profiling("test_operation")
        performance_manager.end_profiling("test_operation")
        
        # –¢–µ—Å—Ç –∫—ç—à–∞
        cache_key = performance_manager.generate_cache_key("test", "data")
        print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –∫—ç—à –∫–ª—é—á {cache_key[:20]}...")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


def test_gui_ready():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–∞–ø—É—Å–∫—É GUI"""
    print("\nüñ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ GUI...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        required_components = [
            'ScanService',
            'ComponentFactory', 
            'ScanSubject',
            'ComplexityAnalyzer',
            'SecurityManager',
            'PerformanceManager'
        ]
        
        for component in required_components:
            if hasattr(service, component.lower().replace('manager', '_manager')):
                print(f"‚úÖ {component} –≥–æ—Ç–æ–≤")
            else:
                print(f"‚ùå {component} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
        
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è GUI")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ GUI: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í–°–ï–• –£–õ–£–ß–®–ï–ù–ò–ô")
    print("=" * 60)
    
    global service
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    tests = [
        test_scan_service_integration,
        test_patterns_integration,
        test_complexity_analyzer_integration,
        test_logging_integration,
        test_security_integration,
        test_performance_integration,
        test_gui_ready
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test.__name__}: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! GUI –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
        print("\nüöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python src/main_refactored.py")
        print("   - –í—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        print("   - –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("   - –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
        print("   - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.")
    
    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
