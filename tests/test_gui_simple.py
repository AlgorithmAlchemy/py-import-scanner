#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π
"""

import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent / "src"))

def test_interfaces():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤...")
    
    try:
        from core.interfaces import ScanResult, ImportData, ProjectData
        print("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: {e}")
        return False

def test_patterns():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    try:
        from core.patterns import (
            ComponentFactory, ComponentType, ScanningStrategyFactory,
            ScanSubject, ProgressObserver, LoggingObserver, MetricsObserver,
            ScanConfigurationBuilder, ScanConfiguration
        )
        print("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç Builder Pattern
        builder = ScanConfigurationBuilder()
        config = builder.with_strategy("adaptive").with_max_workers(4).build()
        print(f"‚úÖ Builder Pattern: {config.strategy_type}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
        return False

def test_complexity_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏...")
    
    try:
        from core.complexity_analyzer import (
            ComplexityAnalyzer, ComplexityMetrics, FunctionMetrics, 
            ClassMetrics, FileComplexityReport, ProjectComplexityReport
        )
        print("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        test_file = Path("test_simple.py")
        test_content = '''
def simple_function():
    return "Hello, World!"

class TestClass:
    def __init__(self):
        self.value = 42
'''
        
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write(test_content)
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
        analyzer = ComplexityAnalyzer()
        report = analyzer.analyze_file(test_file)
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –æ—Ü–µ–Ω–∫–∞ {report.grade}")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        test_file.unlink()
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {e}")
        return False

def test_logging():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    try:
        from core.logging_config import get_logger
        logger = get_logger("TestSimple")
        logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_configuration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from core.configuration import Configuration
        config = Configuration()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_import_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–µ—Ä –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from core.import_parser import ImportParser
        from core.configuration import Configuration
        
        config = Configuration()
        parser = ImportParser(config)
        print("‚úÖ –ü–∞—Ä—Å–µ—Ä –∏–º–ø–æ—Ä—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∏–º–ø–æ—Ä—Ç–æ–≤: {e}")
        return False

def test_project_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    print("\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...")
    
    try:
        from core.project_analyzer import ProjectAnalyzer
        from core.configuration import Configuration
        
        config = Configuration()
        analyzer = ProjectAnalyzer(config)
        print("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
        return False

def test_data_exporter():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from core.data_exporter import DataExporter
        exporter = DataExporter()
        print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_file_scanner():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∫–∞–Ω–µ—Ä —Ñ–∞–π–ª–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤...")
    
    try:
        from core.file_scanner import FileScanner
        from core.configuration import Configuration
        from core.import_parser import ImportParser
        from core.project_analyzer import ProjectAnalyzer
        
        config = Configuration()
        import_parser = ImportParser(config)
        project_analyzer = ProjectAnalyzer(config)
        scanner = FileScanner(config, import_parser, project_analyzer)
        print("‚úÖ –°–∫–∞–Ω–µ—Ä —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –£–ü–†–û–©–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    tests = [
        test_interfaces,
        test_patterns,
        test_complexity_analyzer,
        test_logging,
        test_configuration,
        test_import_parser,
        test_project_analyzer,
        test_data_exporter,
        test_file_scanner
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test.__name__}: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("\n‚úÖ –í—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
        print("   - –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")
        print("   - –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("   - –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞")
        print("   - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        print("   - –ü–∞—Ä—Å–µ—Ä –∏–º–ø–æ—Ä—Ç–æ–≤")
        print("   - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤")
        print("   - –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö")
        print("   - –°–∫–∞–Ω–µ—Ä —Ñ–∞–π–ª–æ–≤")
        print("\nüöÄ GUI –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
