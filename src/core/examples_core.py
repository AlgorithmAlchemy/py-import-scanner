"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ core
"""
import sys
import time
from pathlib import Path
from typing import Dict, Any, Optional

from .project_analyzer_core import IntegratedProjectAnalyzer
from .configuration import Configuration
from .logging_config import get_logger


class CoreExamples:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.config = Configuration()
        self.logger = get_logger("CoreExamples")
        self.analyzer = IntegratedProjectAnalyzer(self.config)
    
    def run_dependency_analysis_example(self, project_path: Path) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("üîç –ó–ê–ü–£–°–ö –ü–†–ò–ú–ï–†–ê: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        print("=" * 50)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            result = self.analyzer.analyze_project(project_path, self._progress_callback)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô:")
            print("-" * 40)
            
            stats = result['project_stats']
            print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats['total_files']}")
            print(f"üì¶ –í—Å–µ–≥–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {stats['total_imports']}")
            print(f"üîß –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫: {stats['unique_libraries']}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {stats['scan_duration']:.2f}—Å")
            
            # –¢–æ–ø –±–∏–±–ª–∏–æ—Ç–µ–∫
            print("\nüèÜ –¢–û–ü-10 –ë–ò–ë–õ–ò–û–¢–ï–ö:")
            print("-" * 30)
            for i, lib in enumerate(result['top_libraries'][:10], 1):
                print(f"{i:2d}. {lib['name']:20s} - {lib['count']:4d} ({lib['percentage']:5.1f}%)")
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            return {}
    
    def run_complexity_analysis_example(self, project_path: Path) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        print("üìä –ó–ê–ü–£–°–ö –ü–†–ò–ú–ï–†–ê: –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞")
        print("=" * 50)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            result = self.analyzer.analyze_project(project_path, self._progress_callback)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –°–õ–û–ñ–ù–û–°–¢–ò:")
            print("-" * 40)
            
            stats = result['project_stats']
            print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats['total_files']}")
            print(f"üìä –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {stats['average_complexity']:.2f}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {stats['scan_duration']:.2f}—Å")
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            complexity_dist = result['complexity_distribution']
            print("\nüìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–õ–û–ñ–ù–û–°–¢–ò:")
            print("-" * 30)
            print(f"–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è (0-5): {complexity_dist['very_low']}")
            print(f"–ù–∏–∑–∫–∞—è (6-10): {complexity_dist['low']}")
            print(f"–°—Ä–µ–¥–Ω—è—è (11-20): {complexity_dist['medium']}")
            print(f"–í—ã—Å–æ–∫–∞—è (21-30): {complexity_dist['high']}")
            print(f"–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è (30+): {complexity_dist['very_high']}")
            
            # –°–∞–º—ã–µ —Å–ª–æ–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
            files_analysis = result['files_analysis']
            sorted_files = sorted(files_analysis, key=lambda x: x['complexity'], reverse=True)
            
            print("\nüî• –°–ê–ú–´–ï –°–õ–û–ñ–ù–´–ï –§–ê–ô–õ–´:")
            print("-" * 30)
            for i, file_analysis in enumerate(sorted_files[:5], 1):
                print(f"{i}. {file_analysis['path']} - {file_analysis['complexity']:.1f}")
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {e}")
            return {}
    
    def run_quality_analysis_example(self, project_path: Path) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
        print("‚ú® –ó–ê–ü–£–°–ö –ü–†–ò–ú–ï–†–ê: –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞")
        print("=" * 50)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            result = self.analyzer.analyze_project(project_path, self._progress_callback)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\n‚ú® –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –ö–ê–ß–ï–°–¢–í–ê:")
            print("-" * 40)
            
            stats = result['project_stats']
            print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats['total_files']}")
            print(f"‚ú® –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {stats['quality_score']:.2f}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {stats['scan_duration']:.2f}—Å")
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
            quality_dist = result['quality_distribution']
            print("\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê:")
            print("-" * 30)
            print(f"–û—Ç–ª–∏—á–Ω–æ–µ (90-100): {quality_dist['excellent']}")
            print(f"–•–æ—Ä–æ—à–µ–µ (70-89): {quality_dist['good']}")
            print(f"–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ (50-69): {quality_dist['fair']}")
            print(f"–ü–ª–æ—Ö–æ–µ (30-49): {quality_dist['poor']}")
            print(f"–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ (0-29): {quality_dist['very_poor']}")
            
            # –§–∞–π–ª—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
            files_analysis = result['files_analysis']
            problematic_files = [f for f in files_analysis if f['quality_score'] < 50]
            
            if problematic_files:
                print(f"\n‚ö†Ô∏è –§–ê–ô–õ–´ –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò (–∫–∞—á–µ—Å—Ç–≤–æ < 50):")
                print("-" * 40)
                for i, file_analysis in enumerate(problematic_files[:10], 1):
                    print(f"{i}. {file_analysis['path']} - {file_analysis['quality_score']:.1f}")
                    if file_analysis['issues']:
                        for issue in file_analysis['issues'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–±–ª–µ–º—ã
                            print(f"   - {issue}")
            else:
                print("\n‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            return {}
    
    def run_architecture_analysis_example(self, project_path: Path) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        print("üèóÔ∏è –ó–ê–ü–£–°–ö –ü–†–ò–ú–ï–†–ê: –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞")
        print("=" * 50)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            result = self.analyzer.analyze_project(project_path, self._progress_callback)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\nüèóÔ∏è –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –ê–†–•–ò–¢–ï–ö–¢–£–†–´:")
            print("-" * 40)
            
            stats = result['project_stats']
            print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats['total_files']}")
            print(f"üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {stats['total_lines']}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {stats['scan_duration']:.2f}—Å")
            
            # –î–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            architecture_data = result.get('architecture_data', {})
            if architecture_data:
                print("\nüèóÔ∏è –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:")
                print("-" * 30)
                for key, value in architecture_data.items():
                    print(f"{key}: {value}")
            else:
                print("\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
            # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            dependency_graph = result.get('dependency_graph', {})
            if dependency_graph:
                print("\nüîó –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –ú–û–î–£–õ–ï–ô:")
                print("-" * 30)
                for module, dependencies in list(dependency_graph.items())[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    print(f"üì¶ {module}:")
                    for dep in dependencies[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                        print(f"  ‚îî‚îÄ‚îÄ {dep}")
                    if len(dependencies) > 5:
                        print(f"  ‚îî‚îÄ‚îÄ ... –∏ –µ—â–µ {len(dependencies) - 5}")
            else:
                print("\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {e}")
            return {}
    
    def run_comprehensive_analysis_example(self, project_path: Path) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ—Ä –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–†–ò–ú–ï–†–ê: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞")
        print("=" * 50)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            result = self.analyzer.analyze_project(project_path, self._progress_callback)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\nüìä –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢:")
            print("=" * 50)
            
            stats = result['project_stats']
            print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats['total_files']}")
            print(f"üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {stats['total_lines']}")
            print(f"üì¶ –í—Å–µ–≥–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {stats['total_imports']}")
            print(f"üîß –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫: {stats['unique_libraries']}")
            print(f"üìä –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {stats['average_complexity']:.2f}")
            print(f"‚ú® –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {stats['quality_score']:.2f}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {stats['scan_duration']:.2f}—Å")
            
            # –¢–æ–ø –±–∏–±–ª–∏–æ—Ç–µ–∫
            print("\nüèÜ –¢–û–ü-10 –ë–ò–ë–õ–ò–û–¢–ï–ö:")
            print("-" * 30)
            for i, lib in enumerate(result['top_libraries'][:10], 1):
                print(f"{i:2d}. {lib['name']:20s} - {lib['count']:4d} ({lib['percentage']:5.1f}%)")
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
            quality_dist = result['quality_distribution']
            print("\n‚ú® –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê:")
            print("-" * 30)
            print(f"–û—Ç–ª–∏—á–Ω–æ–µ (90-100): {quality_dist['excellent']}")
            print(f"–•–æ—Ä–æ—à–µ–µ (70-89): {quality_dist['good']}")
            print(f"–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ (50-69): {quality_dist['fair']}")
            print(f"–ü–ª–æ—Ö–æ–µ (30-49): {quality_dist['poor']}")
            print(f"–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ (0-29): {quality_dist['very_poor']}")
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            complexity_dist = result['complexity_distribution']
            print("\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–õ–û–ñ–ù–û–°–¢–ò:")
            print("-" * 30)
            print(f"–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è (0-5): {complexity_dist['very_low']}")
            print(f"–ù–∏–∑–∫–∞—è (6-10): {complexity_dist['low']}")
            print(f"–°—Ä–µ–¥–Ω—è—è (11-20): {complexity_dist['medium']}")
            print(f"–í—ã—Å–æ–∫–∞—è (21-30): {complexity_dist['high']}")
            print(f"–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è (30+): {complexity_dist['very_high']}")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("-" * 30)
            
            if quality_dist['poor'] + quality_dist['very_poor'] > 0:
                print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ñ–∞–π–ª—ã —Å –Ω–∏–∑–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º –∫–æ–¥–∞")
                print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥")
            
            if complexity_dist['high'] + complexity_dist['very_high'] > 0:
                print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ñ–∞–π–ª—ã —Å –≤—ã—Å–æ–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é")
                print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ª–æ–≥–∏–∫—É")
            
            if stats['unique_libraries'] > 50:
                print("‚ö†Ô∏è –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
                print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            
            if stats['average_complexity'] > 15:
                print("‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è —Å—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞")
                print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É")
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
            return {}
    
    def _progress_callback(self, message: str):
        """–û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        print(f"üìù {message}")
    
    def export_example_report(self, result: Dict[str, Any], output_path: Path, format: str = 'json'):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –ø—Ä–∏–º–µ—Ä–∞"""
        try:
            self.analyzer.analysis_result = result
            self.analyzer.export_report(output_path, format)
            print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤"""
    if len(sys.argv) < 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python examples_core.py <—Ç–∏–ø_–∞–Ω–∞–ª–∏–∑–∞> <–ø—É—Ç—å_–∫_–ø—Ä–æ–µ–∫—Ç—É>")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞:")
        print("  dependency  - –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        print("  complexity  - –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
        print("  quality     - –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞")
        print("  architecture - –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
        print("  comprehensive - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        return
    
    analysis_type = sys.argv[1]
    project_path = Path(sys.argv[2])
    
    if not project_path.exists():
        print(f"‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {project_path}")
        return
    
    examples = CoreExamples()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if analysis_type == "dependency":
        result = examples.run_dependency_analysis_example(project_path)
    elif analysis_type == "complexity":
        result = examples.run_complexity_analysis_example(project_path)
    elif analysis_type == "quality":
        result = examples.run_quality_analysis_example(project_path)
    elif analysis_type == "architecture":
        result = examples.run_architecture_analysis_example(project_path)
    elif analysis_type == "comprehensive":
        result = examples.run_comprehensive_analysis_example(project_path)
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {analysis_type}")
        return
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    if result:
        output_path = Path(f"analysis_report_{analysis_type}_{int(time.time())}.json")
        examples.export_example_report(result, output_path, 'json')


if __name__ == "__main__":
    main()
