"""
–û–∫–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
"""
import os
import json
import sys
import time
import traceback
from pathlib import Path
from typing import Dict, Any, Optional

from PySide6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                               QTabWidget, QTextEdit, QLabel, QPushButton, 
                               QTableWidget, QTableWidgetItem, QProgressBar,
                               QFrame, QSplitter, QScrollArea, QComboBox,
                               QFileDialog, QMessageBox, QGridLayout)
from PySide6.QtCore import Qt, QThread, Signal, QTimer
from PySide6.QtGui import QFont, QPalette, QColor, QPixmap
# –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º matplotlib –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
# import matplotlib.pyplot as plt
# from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
# from matplotlib.figure import Figure
# import matplotlib
# matplotlib.use('Qt5Agg')

from ..core.project_analyzer_core import IntegratedProjectAnalyzer
from ..core.configuration import Configuration


def get_ui_texts(language="ru"):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º"""
    texts = {
        "ru": {
            "window_title": "üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞",
            "title_label": "üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞",
            "select_folder_btn": "üìÅ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É",
            "analyze_btn": "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É",
            "export_btn": "üíæ –≠–∫—Å–ø–æ—Ä—Ç",
            "progress_label": "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
            "ready_status": "–ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É",
            "folder_selected": "–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {}",
            "warning_title": "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
            "warning_select_folder": "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É!",
            "error_title": "–û—à–∏–±–∫–∞",
            "error_analysis": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:\n{}",
            "error_export": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:\n{}",
            "success_export": "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {}",
            "analysis_completed": "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!",
            "analysis_error": "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞",
            "overview_tab": "üìä –û–±–∑–æ—Ä",
            "libraries_tab": "üì¶ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏",
            "quality_tab": "‚ú® –ö–∞—á–µ—Å—Ç–≤–æ",
            "complexity_tab": "üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å",
            "architecture_tab": "üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
            "dependencies_tab": "üîó –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
            "overview_title": "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–ø–∫–∏",
            "architecture_title": "üèóÔ∏è –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ü–ê–ü–ö–ò",
            "dependencies_title": "üîó –ê–ù–ê–õ–ò–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –í –ü–ê–ü–ö–ï",
            "architecture_placeholder": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø–∞–ø–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...",
            "dependencies_placeholder": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –ø–∞–ø–∫–µ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...",
            "chart_libraries": "–¢–æ–ø –±–∏–±–ª–∏–æ—Ç–µ–∫",
            "chart_quality": "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞",
            "chart_complexity": "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞",
            "chart_quality_folder": "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –≤ –ø–∞–ø–∫–µ",
            "no_architecture_data": "–î–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
            "no_dependencies_data": "–î–∞–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        },
        "en": {
            "window_title": "üìä Detailed Project Analysis",
            "title_label": "üìä Detailed Project Analysis",
            "select_folder_btn": "üìÅ Select Folder",
            "analyze_btn": "üîç Analyze Folder",
            "export_btn": "üíæ Export",
            "progress_label": "Select folder for analysis",
            "ready_status": "Ready for analysis",
            "folder_selected": "Selected folder: {}",
            "warning_title": "Warning",
            "warning_select_folder": "Please select a folder first!",
            "error_title": "Error",
            "error_analysis": "Error during analysis:\n{}",
            "error_export": "Error saving report:\n{}",
            "success_export": "Report saved to {}",
            "analysis_completed": "‚úÖ Analysis completed!",
            "analysis_error": "‚ùå Analysis error",
            "overview_tab": "üìä Overview",
            "libraries_tab": "üì¶ Libraries",
            "quality_tab": "‚ú® Quality",
            "complexity_tab": "üìä Complexity",
            "architecture_tab": "üèóÔ∏è Architecture",
            "dependencies_tab": "üîó Dependencies",
            "overview_title": "üìä General Folder Statistics",
            "architecture_title": "üèóÔ∏è FOLDER ARCHITECTURE ANALYSIS",
            "dependencies_title": "üîó DEPENDENCIES ANALYSIS IN FOLDER",
            "architecture_placeholder": "Folder architecture analysis results will appear here...",
            "dependencies_placeholder": "Folder dependencies analysis results will appear here...",
            "chart_libraries": "Top Libraries",
            "chart_quality": "Code Quality Distribution",
            "chart_complexity": "Code Complexity Distribution",
            "chart_quality_folder": "Code Quality Distribution in Folder",
            "no_architecture_data": "Architecture data unavailable",
            "no_dependencies_data": "Dependencies data unavailable"
        }
    }
    
    return texts.get(language, texts["ru"])


def debug_log(message: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"[DEBUG] StatsWindow: {message}")
    sys.stdout.flush()


class AnalysisWorker(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    progress_updated = Signal(str)
    analysis_completed = Signal(dict)
    error_occurred = Signal(str)
    
    def __init__(self, project_path: Path, config: Configuration):
        debug_log("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AnalysisWorker...")
        super().__init__()
        self.project_path = project_path
        self.config = config
        debug_log(f"‚úÖ AnalysisWorker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å project_path: {project_path}")
        
        try:
            debug_log("üîß –°–æ–∑–¥–∞–Ω–∏–µ IntegratedProjectAnalyzer...")
            self.analyzer = IntegratedProjectAnalyzer(config)
            debug_log("‚úÖ IntegratedProjectAnalyzer —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            debug_log(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ IntegratedProjectAnalyzer: {e}")
            debug_log(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            raise
    
    def run(self):
        debug_log("üöÄ AnalysisWorker.run() –Ω–∞—á–∞—Ç")
        try:
            debug_log("üîç –í—ã–∑–æ–≤ analyzer.analyze_project...")
            result = self.analyzer.analyze_project(
                self.project_path, 
                self.progress_updated.emit
            )
            debug_log("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            debug_log(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∏: {list(result.keys()) if result else 'None'}")
            self.analysis_completed.emit(result)
        except Exception as e:
            debug_log(f"‚ùå –û–®–ò–ë–ö–ê –≤ AnalysisWorker.run(): {e}")
            debug_log(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            self.error_occurred.emit(str(e))


class StatsWindow(QMainWindow):
    """–û–∫–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–ø–∫–∏/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    
    def __init__(self, scan_service=None, language="ru"):
        debug_log("=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø StatsWindow ===")
        debug_log(f"scan_service: {scan_service}")
        debug_log(f"language: {language}")
        
        try:
            super().__init__()
            debug_log("‚úÖ super().__init__() –≤—ã–ø–æ–ª–Ω–µ–Ω")
            
            self.folder_path = None  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç –ø–∞–ø–∫—É
            self.scan_service = scan_service
            self.language = language
            self.texts = get_ui_texts(language)
            self.analysis_result = None
            self.analysis_worker = None
            
            debug_log("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            debug_log("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            self.config = Configuration()
            debug_log("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            
            debug_log("üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI...")
            self.init_ui()
            debug_log("‚úÖ UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            debug_log("üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π...")
            self.setup_styles()
            debug_log("‚úÖ –°—Ç–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
            # –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç –ø–∞–ø–∫—É
            debug_log("‚ÑπÔ∏è –ê–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –ø–∞–ø–∫—É")
            
            debug_log("‚úÖ StatsWindow –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            debug_log(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ StatsWindow: {e}")
            debug_log(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            raise
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        debug_log("üé® –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI...")
        
        self.setWindowTitle(self.texts["window_title"])
        self.setMinimumSize(1200, 800)
        debug_log("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(20, 20, 20, 20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel(self.texts["title_label"])
        title_label.setFont(QFont("Segoe UI", 20, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("color: #2c3e50; margin-bottom: 10px;")
        main_layout.addWidget(title_label)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = QFrame()
        control_frame.setFrameStyle(QFrame.StyledPanel)
        control_frame.setStyleSheet("""
            QFrame {
                background-color: #ecf0f1;
                border-radius: 10px;
                padding: 15px;
            }
        """)
        
        control_layout = QHBoxLayout(control_frame)
        
        # –ö–Ω–æ–ø–∫–∏
        self.select_folder_btn = QPushButton(self.texts["select_folder_btn"])
        self.select_folder_btn.setFont(QFont("Segoe UI", 11))
        self.select_folder_btn.clicked.connect(self.select_folder)
        self.select_folder_btn.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        
        self.analyze_btn = QPushButton(self.texts["analyze_btn"])
        self.analyze_btn.setFont(QFont("Segoe UI", 11))
        self.analyze_btn.clicked.connect(self.start_analysis)
        self.analyze_btn.setEnabled(False)
        self.analyze_btn.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #229954;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
                color: #7f8c8d;
            }
        """)
        
        self.export_btn = QPushButton("üíæ –≠–∫—Å–ø–æ—Ä—Ç")
        self.export_btn.setFont(QFont("Segoe UI", 11))
        self.export_btn.clicked.connect(self.export_report)
        self.export_btn.setEnabled(False)
        self.export_btn.setStyleSheet("""
            QPushButton {
                background-color: #9b59b6;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #8e44ad;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
                color: #7f8c8d;
            }
        """)
        
        control_layout.addWidget(self.select_folder_btn)
        control_layout.addWidget(self.analyze_btn)
        control_layout.addWidget(self.export_btn)
        control_layout.addStretch()
        
        main_layout.addWidget(control_frame)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_label = QLabel(self.texts["progress_label"])
        self.progress_label.setFont(QFont("Segoe UI", 10))
        self.progress_label.setStyleSheet("color: #2c3e50; margin-top: 10px;")
        main_layout.addWidget(self.progress_label)
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                text-align: center;
                background-color: #ecf0f1;
            }
            QProgressBar::chunk {
                background-color: #3498db;
                border-radius: 3px;
            }
        """)
        main_layout.addWidget(self.progress_bar)
        
        # –í–∫–ª–∞–¥–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        self.tab_widget = QTabWidget()
        self.tab_widget.setStyleSheet("""
            QTabWidget::pane {
                border: 2px solid #bdc3c7;
                border-radius: 8px;
                background-color: white;
            }
            QTabBar::tab {
                background-color: #ecf0f1;
                padding: 10px 20px;
                margin-right: 2px;
                border-top-left-radius: 5px;
                border-top-right-radius: 5px;
            }
            QTabBar::tab:selected {
                background-color: #3498db;
                color: white;
            }
        """)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.create_overview_tab()
        self.create_libraries_tab()
        self.create_quality_tab()
        self.create_complexity_tab()
        self.create_architecture_tab()
        self.create_dependencies_tab()
        
        main_layout.addWidget(self.tab_widget)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.statusBar().showMessage("–ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É")
        
        debug_log("‚úÖ UI –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def create_overview_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ–±–∑–æ—Ä–∞"""
        overview_widget = QWidget()
        layout = QVBoxLayout(overview_widget)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = QFrame()
        stats_frame.setFrameStyle(QFrame.StyledPanel)
        stats_frame.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 8px;
                padding: 15px;
            }
        """)
        
        stats_layout = QGridLayout(stats_frame)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        stats_title = QLabel("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–ø–∫–∏")
        stats_title.setFont(QFont("Segoe UI", 14, QFont.Bold))
        stats_title.setStyleSheet("color: #2c3e50; margin-bottom: 10px;")
        stats_layout.addWidget(stats_title, 0, 0, 1, 2)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        self.stats_labels = {}
        metrics = [
            ("total_files", "üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤"),
            ("total_lines", "üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫"),
            ("total_imports", "üì¶ –í—Å–µ–≥–æ –∏–º–ø–æ—Ä—Ç–æ–≤"),
            ("unique_libraries", "üîß –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"),
            ("average_complexity", "üìä –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å"),
            ("quality_score", "‚ú® –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ"),
            ("scan_duration", "‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞")
        ]
        
        for i, (key, label) in enumerate(metrics):
            row = (i // 2) + 1
            col = (i % 2) * 2
            
            label_widget = QLabel(label)
            label_widget.setFont(QFont("Segoe UI", 10, QFont.Bold))
            label_widget.setStyleSheet("color: #2c3e50;")
            
            value_widget = QLabel("‚Äî")
            value_widget.setFont(QFont("Segoe UI", 12))
            value_widget.setStyleSheet("color: #27ae60; font-weight: bold;")
            
            stats_layout.addWidget(label_widget, row, col)
            stats_layout.addWidget(value_widget, row, col + 1)
            
            self.stats_labels[key] = value_widget
        
        layout.addWidget(stats_frame)
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        charts_frame = QFrame()
        charts_frame.setFrameStyle(QFrame.StyledPanel)
        charts_frame.setStyleSheet("""
            QFrame {
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 8px;
                padding: 15px;
            }
        """)
        
        charts_layout = QHBoxLayout(charts_frame)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ç–æ–ø –±–∏–±–ª–∏–æ—Ç–µ–∫
        self.libraries_chart = self.create_chart("–¢–æ–ø –±–∏–±–ª–∏–æ—Ç–µ–∫")
        charts_layout.addWidget(self.libraries_chart)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
        self.quality_chart = self.create_chart("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞")
        charts_layout.addWidget(self.quality_chart)
        
        layout.addWidget(charts_frame)
        
        self.tab_widget.addTab(overview_widget, "üìä –û–±–∑–æ—Ä")
    
    def create_libraries_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫"""
        libraries_widget = QWidget()
        layout = QVBoxLayout(libraries_widget)
        
        # –¢–∞–±–ª–∏—Ü–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
        self.libraries_table = QTableWidget()
        self.libraries_table.setColumnCount(5)
        self.libraries_table.setHorizontalHeaderLabels([
            "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ü—Ä–æ—Ü–µ–Ω—Ç", "–§–∞–π–ª—ã", "–ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª"
        ])
        self.libraries_table.setStyleSheet("""
            QTableWidget {
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 5px;
                gridline-color: #dee2e6;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                padding: 8px;
                border: 1px solid #dee2e6;
                font-weight: bold;
            }
        """)
        
        layout.addWidget(self.libraries_table)
        
        self.tab_widget.addTab(libraries_widget, "üì¶ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏")
    
    def create_quality_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
        quality_widget = QWidget()
        layout = QVBoxLayout(quality_widget)
        
        # –ì—Ä–∞—Ñ–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
        self.quality_distribution_chart = self.create_chart("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –≤ –ø–∞–ø–∫–µ")
        layout.addWidget(self.quality_distribution_chart)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
        self.quality_table = QTableWidget()
        self.quality_table.setColumnCount(4)
        self.quality_table.setHorizontalHeaderLabels([
            "–§–∞–π–ª", "–ö–∞—á–µ—Å—Ç–≤–æ", "–ü—Ä–æ–±–ª–µ–º—ã", "–°–ª–æ–∂–Ω–æ—Å—Ç—å"
        ])
        self.quality_table.setStyleSheet("""
            QTableWidget {
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 5px;
                gridline-color: #dee2e6;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                padding: 8px;
                border: 1px solid #dee2e6;
                font-weight: bold;
            }
        """)
        
        layout.addWidget(self.quality_table)
        
        self.tab_widget.addTab(quality_widget, "‚ú® –ö–∞—á–µ—Å—Ç–≤–æ")
    
    def create_complexity_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        complexity_widget = QWidget()
        layout = QVBoxLayout(complexity_widget)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        self.complexity_chart = self.create_chart("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞")
        layout.addWidget(self.complexity_chart)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–ª–æ–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.complexity_table = QTableWidget()
        self.complexity_table.setColumnCount(3)
        self.complexity_table.setHorizontalHeaderLabels([
            "–§–∞–π–ª", "–°–ª–æ–∂–Ω–æ—Å—Ç—å", "–°—Ç—Ä–æ–∫"
        ])
        self.complexity_table.setStyleSheet("""
            QTableWidget {
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 5px;
                gridline-color: #dee2e6;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                padding: 8px;
                border: 1px solid #dee2e6;
                font-weight: bold;
            }
        """)
        
        layout.addWidget(self.complexity_table)
        
        self.tab_widget.addTab(complexity_widget, "üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å")
    
    def create_architecture_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        architecture_widget = QWidget()
        layout = QVBoxLayout(architecture_widget)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        self.architecture_text = QTextEdit()
        self.architecture_text.setFont(QFont("Consolas", 10))
        self.architecture_text.setStyleSheet("""
            QTextEdit {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 5px;
                padding: 10px;
                color: #2c3e50;
            }
        """)
        self.architecture_text.setPlaceholderText("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø–∞–ø–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...")
        
        layout.addWidget(self.architecture_text)
        
        self.tab_widget.addTab(architecture_widget, "üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")
    
    def create_dependencies_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        dependencies_widget = QWidget()
        layout = QVBoxLayout(dependencies_widget)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self.dependencies_text = QTextEdit()
        self.dependencies_text.setFont(QFont("Consolas", 10))
        self.dependencies_text.setStyleSheet("""
            QTextEdit {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 5px;
                padding: 10px;
                color: #2c3e50;
            }
        """)
        self.dependencies_text.setPlaceholderText("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –ø–∞–ø–∫–µ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...")
        
        layout.addWidget(self.dependencies_text)
        
        self.tab_widget.addTab(dependencies_widget, "üîó –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    
    def create_chart(self, title: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"""
        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–∏–¥–∂–µ—Ç –≤–º–µ—Å—Ç–æ –≥—Ä–∞—Ñ–∏–∫–∞
        from PySide6.QtWidgets import QLabel
        label = QLabel(f"üìä {title}\n(–ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
        label.setAlignment(Qt.AlignCenter)
        label.setStyleSheet("""
            QLabel {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 5px;
                padding: 20px;
                color: #6c757d;
                font-size: 12px;
            }
        """)
        return label
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f6fa;
            }
        """)
    
    def select_folder(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        directory = QFileDialog.getExistingDirectory(
            self, 
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
            os.getcwd()
        )
        
        if directory:
            self.folder_path = Path(directory)
            self.analyze_btn.setEnabled(True)
            self.progress_label.setText(self.texts["folder_selected"].format(directory))
            self.statusBar().showMessage(f"–ü–∞–ø–∫–∞: {directory}")
    
    def start_analysis(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–ø–∫–∏"""
        debug_log("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–ø–∫–∏...")
        debug_log(f"folder_path: {self.folder_path}")
        
        if not self.folder_path:
            debug_log("‚ùå folder_path –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É!")
            return
        
        debug_log("‚úÖ folder_path —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        self.analyze_btn.setEnabled(False)
        self.select_folder_btn.setEnabled(False)
        self.export_btn.setEnabled(False)
        debug_log("‚úÖ –ö–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_bar.setVisible(True)
        self.progress_bar.setRange(0, 0)  # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        debug_log("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –ø–æ–∫–∞–∑–∞–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        debug_log("üîß –°–æ–∑–¥–∞–Ω–∏–µ AnalysisWorker...")
        try:
            self.analysis_worker = AnalysisWorker(self.folder_path, self.config)
            debug_log("‚úÖ AnalysisWorker —Å–æ–∑–¥–∞–Ω")
            
            self.analysis_worker.progress_updated.connect(self.update_progress)
            self.analysis_worker.analysis_completed.connect(self.analysis_completed)
            self.analysis_worker.error_occurred.connect(self.analysis_error)
            debug_log("‚úÖ –°–∏–≥–Ω–∞–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
            
            debug_log("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –∞–Ω–∞–ª–∏–∑–∞...")
            self.analysis_worker.start()
            debug_log("‚úÖ –ü–æ—Ç–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            debug_log(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ AnalysisWorker: {e}")
            debug_log(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∞–ª–∏–∑–∞:\n{e}")
            # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
            self.analyze_btn.setEnabled(True)
            self.select_folder_btn.setEnabled(True)
            self.export_btn.setEnabled(True)
            self.progress_bar.setVisible(False)
    
    def update_progress(self, message: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_label.setText(message)
        self.statusBar().showMessage(message)
    
    def analysis_completed(self, result: Dict[str, Any]):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞"""
        self.analysis_result = result
        
        # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_bar.setVisible(False)
        
        # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        self.analyze_btn.setEnabled(True)
        self.select_folder_btn.setEnabled(True)
        self.export_btn.setEnabled(True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.update_statistics()
        self.update_libraries_table()
        self.update_quality_tab()
        self.update_complexity_tab()
        self.update_architecture_tab()
        self.update_dependencies_tab()
        
        self.progress_label.setText(self.texts["analysis_completed"])
        self.statusBar().showMessage("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    
    def analysis_error(self, error_message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:\n{error_message}")
        
        # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        self.analyze_btn.setEnabled(True)
        self.select_folder_btn.setEnabled(True)
        
        # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_bar.setVisible(False)
        
        self.progress_label.setText(self.texts["analysis_error"])
        self.statusBar().showMessage("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
    
    def update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.analysis_result:
            return
        
        stats = self.analysis_result['project_stats']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        self.stats_labels['total_files'].setText(str(stats['total_files']))
        self.stats_labels['total_lines'].setText(str(stats['total_lines']))
        self.stats_labels['total_imports'].setText(str(stats['total_imports']))
        self.stats_labels['unique_libraries'].setText(str(stats['unique_libraries']))
        self.stats_labels['average_complexity'].setText(f"{stats['average_complexity']:.2f}")
        self.stats_labels['quality_score'].setText(f"{stats['quality_score']:.2f}")
        self.stats_labels['scan_duration'].setText(f"{stats['scan_duration']:.2f}—Å")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        self.update_libraries_chart()
        self.update_quality_chart()
    
    def update_libraries_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±–∏–±–ª–∏–æ—Ç–µ–∫"""
        if not self.analysis_result:
            return
        
        libraries = self.analysis_result['top_libraries']
        
        self.libraries_table.setRowCount(len(libraries))
        
        for i, lib in enumerate(libraries):
            self.libraries_table.setItem(i, 0, QTableWidgetItem(lib['name']))
            self.libraries_table.setItem(i, 1, QTableWidgetItem(str(lib['count'])))
            self.libraries_table.setItem(i, 2, QTableWidgetItem(f"{lib['percentage']:.1f}%"))
            self.libraries_table.setItem(i, 3, QTableWidgetItem(str(len(lib['files']))))
            self.libraries_table.setItem(i, 4, QTableWidgetItem(lib['first_occurrence']))
        
        self.libraries_table.resizeColumnsToContents()
    
    def update_libraries_chart(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫"""
        if not self.analysis_result:
            return
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        pass
    
    def update_quality_chart(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
        if not self.analysis_result:
            return
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        pass
    
    def update_quality_tab(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
        if not self.analysis_result:
            return
        
        files_analysis = self.analysis_result['files_analysis']
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        sorted_files = sorted(files_analysis, key=lambda x: x['quality_score'])
        
        self.quality_table.setRowCount(len(sorted_files))
        
        for i, file_analysis in enumerate(sorted_files):
            self.quality_table.setItem(i, 0, QTableWidgetItem(file_analysis['path']))
            self.quality_table.setItem(i, 1, QTableWidgetItem(f"{file_analysis['quality_score']:.1f}"))
            self.quality_table.setItem(i, 2, QTableWidgetItem(str(len(file_analysis['issues']))))
            self.quality_table.setItem(i, 3, QTableWidgetItem(f"{file_analysis['complexity']:.1f}"))
        
        self.quality_table.resizeColumnsToContents()
    
    def update_complexity_tab(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        if not self.analysis_result:
            return
        
        files_analysis = self.analysis_result['files_analysis']
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        sorted_files = sorted(files_analysis, key=lambda x: x['complexity'], reverse=True)
        
        self.complexity_table.setRowCount(len(sorted_files))
        
        for i, file_analysis in enumerate(sorted_files):
            self.complexity_table.setItem(i, 0, QTableWidgetItem(file_analysis['path']))
            self.complexity_table.setItem(i, 1, QTableWidgetItem(f"{file_analysis['complexity']:.1f}"))
            self.complexity_table.setItem(i, 2, QTableWidgetItem(str(file_analysis['lines'])))
        
        self.complexity_table.resizeColumnsToContents()
    
    def update_architecture_tab(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        if not self.analysis_result:
            return
        
        architecture_data = self.analysis_result.get('architecture_data', {})
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        text = "üèóÔ∏è –ê–ù–ê–õ–ò–ó –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ü–ê–ü–ö–ò\n"
        text += "=" * 50 + "\n\n"
        
        if architecture_data:
            for key, value in architecture_data.items():
                text += f"{key}: {value}\n"
        else:
            text += "–î–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        self.architecture_text.setText(text)
    
    def update_dependencies_tab(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        if not self.analysis_result:
            return
        
        dependency_graph = self.analysis_result.get('dependency_graph', {})
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        text = "üîó –ê–ù–ê–õ–ò–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –í –ü–ê–ü–ö–ï\n"
        text += "=" * 50 + "\n\n"
        
        if dependency_graph:
            for module, dependencies in dependency_graph.items():
                text += f"üì¶ {module}:\n"
                for dep in dependencies:
                    text += f"  ‚îî‚îÄ‚îÄ {dep}\n"
                text += "\n"
        else:
            text += "–î–∞–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        self.dependencies_text.setText(text)
    
    def export_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞"""
        if not self.analysis_result:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑!")
            return
        
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç",
            f"project_analysis_{int(time.time())}.json",
            "JSON —Ñ–∞–π–ª—ã (*.json);;–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt)"
        )
        
        if file_path:
            try:
                output_path = Path(file_path)
                format_type = 'json' if file_path.endswith('.json') else 'txt'
                
                # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                analyzer = IntegratedProjectAnalyzer(self.config)
                analyzer.analysis_result = self.analysis_result
                analyzer.export_report(output_path, format_type)
                
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {file_path}")
                
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:\n{e}")
