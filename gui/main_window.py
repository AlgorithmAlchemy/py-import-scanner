"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º PySide6 –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""

import os
import re
import threading
from threading import Event
from collections import Counter
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                               QHBoxLayout, QPushButton, QTextEdit, QLabel, 
                               QProgressBar, QFileDialog, QMenu, QMessageBox,
                               QFrame, QSplitter, QScrollArea, QComboBox)
from PySide6.QtCore import Qt, QThread, Signal, QTimer, QTranslator, QLocale
from PySide6.QtGui import QFont, QPalette, QColor, QAction, QIcon
import pyperclip
from colorama import init
import queue
from concurrent.futures import ThreadPoolExecutor, as_completed
import ast

from utils import read_gitignore, is_ignored, find_projects

init(autoreset=True)

class ScanWorker(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    progress_updated = Signal(str)
    scan_completed = Signal(dict)
    error_occurred = Signal(str)
    
    def __init__(self, directory, stop_event):
        super().__init__()
        self.directory = directory
        self.stop_event = stop_event
        
    def run(self):
        try:
            imports_count = {}
            task_queue = queue.Queue()
            
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            self.scan_directory_for_imports_parallel(
                self.directory, 
                self.progress_updated.emit,
                task_queue, 
                self.stop_event
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            while not task_queue.empty():
                try:
                    task_type, data = task_queue.get_nowait()
                    if task_type == 'imports':
                        imports_count.update(data)
                except queue.Empty:
                    break
                    
            self.scan_completed.emit(imports_count)
            
        except Exception as e:
            self.error_occurred.emit(str(e))
    
    def scan_directory_for_imports_parallel(self, directory, progress_callback, task_queue, stop_event):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        if stop_event.is_set():
            return
            
        excluded_dirs = get_gitignore_excluded_dirs()
        py_files = []
        
        # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤
        for root, dirs, files in os.walk(directory):
            if stop_event.is_set():
                return
                
            # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏
            dirs[:] = [d for d in dirs if not is_excluded_directory(d, excluded_dirs)]
            
            for file in files:
                if file.endswith('.py'):
                    py_files.append(os.path.join(root, file))
                    
            progress_callback(f"–ù–∞–π–¥–µ–Ω–æ {len(py_files)} Python —Ñ–∞–π–ª–æ–≤...")
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
        imports_count = {}
        with ThreadPoolExecutor(max_workers=os.cpu_count()) as executor:
            future_to_file = {
                executor.submit(find_imports_in_file, file_path): file_path 
                for file_path in py_files
            }
            
            completed = 0
            for future in as_completed(future_to_file):
                if stop_event.is_set():
                    return
                    
                completed += 1
                progress_callback(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {completed}/{len(py_files)} —Ñ–∞–π–ª–æ–≤...")
                
                try:
                    imports = future.result()
                    for imp in imports:
                        imports_count[imp] = imports_count.get(imp, 0) + 1
                except Exception as e:
                    continue
        
        task_queue.put(('imports', imports_count))


class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        super().__init__()
        self.stop_event = Event()
        self.scan_worker = None
        self.imports_count = {}
        self.project_data = {}
        self.project_data_ready = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
        self.translator = QTranslator()
        self.current_language = "ru"
        
        self.init_ui()
        self.setup_styles()
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("Python Import Parser - –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤")
        self.setMinimumSize(1000, 700)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(20, 20, 20, 20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("Python Import Parser")
        title_label.setObjectName("title_label")
        title_label.setFont(QFont("Segoe UI", 24, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("color: #2c3e50; margin-bottom: 10px;")
        main_layout.addWidget(title_label)
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle_label = QLabel("–ê–Ω–∞–ª–∏–∑ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ Python –ø—Ä–æ–µ–∫—Ç–∞—Ö")
        subtitle_label.setObjectName("subtitle_label")
        subtitle_label.setFont(QFont("Segoe UI", 12))
        subtitle_label.setAlignment(Qt.AlignCenter)
        subtitle_label.setStyleSheet("color: #7f8c8d; margin-bottom: 20px;")
        main_layout.addWidget(subtitle_label)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = QFrame()
        control_frame.setFrameStyle(QFrame.StyledPanel)
        control_frame.setStyleSheet("""
            QFrame {
                background-color: #ecf0f1;
                border-radius: 10px;
                padding: 15px;
            }
        """)
        
        control_layout = QHBoxLayout(control_frame)
        
        # –ö–Ω–æ–ø–∫–∏
        self.browse_btn = QPushButton("üìÅ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É")
        self.browse_btn.setFont(QFont("Segoe UI", 11))
        self.browse_btn.clicked.connect(self.browse_directory)
        self.browse_btn.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
            QPushButton:pressed {
                background-color: #21618c;
            }
        """)
        
        self.scan_btn = QPushButton("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å")
        self.scan_btn.setFont(QFont("Segoe UI", 11))
        self.scan_btn.clicked.connect(self.start_scan)
        self.scan_btn.setEnabled(False)
        self.scan_btn.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #229954;
            }
            QPushButton:pressed {
                background-color: #1e8449;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
                color: #7f8c8d;
            }
        """)
        
        self.stop_btn = QPushButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_btn.setFont(QFont("Segoe UI", 11))
        self.stop_btn.clicked.connect(self.stop_scan)
        self.stop_btn.setEnabled(False)
        self.stop_btn.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
            QPushButton:pressed {
                background-color: #a93226;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
                color: #7f8c8d;
            }
        """)
        
        self.stats_btn = QPushButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        self.stats_btn.setFont(QFont("Segoe UI", 11))
        self.stats_btn.clicked.connect(self.show_stats)
        self.stats_btn.setEnabled(False)
        self.stats_btn.setStyleSheet("""
            QPushButton {
                background-color: #9b59b6;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #8e44ad;
            }
            QPushButton:pressed {
                background-color: #7d3c98;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
                color: #7f8c8d;
            }
        """)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
        self.lang_combo = QComboBox()
        self.lang_combo.addItem("–†—É—Å—Å–∫–∏–π", "ru")
        self.lang_combo.addItem("English", "en")
        self.lang_combo.setCurrentIndex(0)
        self.lang_combo.currentIndexChanged.connect(self.change_language)
        self.lang_combo.setStyleSheet("""
            QComboBox {
                background-color: #f39c12;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 6px;
                font-weight: bold;
                font-family: 'Segoe UI';
                font-size: 11pt;
            }
            QComboBox:hover {
                background-color: #e67e22;
            }
            QComboBox QAbstractItemView {
                background-color: #f39c12;
                color: white;
                selection-background-color: #e67e22;
                selection-color: white;
            }
        """)
        
        control_layout.addWidget(self.browse_btn)
        control_layout.addWidget(self.scan_btn)
        control_layout.addWidget(self.stop_btn)
        control_layout.addWidget(self.stats_btn)
        control_layout.addWidget(self.lang_combo)
        control_layout.addStretch()
        
        main_layout.addWidget(control_frame)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_label = QLabel("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.progress_label.setFont(QFont("Segoe UI", 10))
        self.progress_label.setStyleSheet("color: #2c3e50; margin-top: 10px;")
        main_layout.addWidget(self.progress_label)
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                text-align: center;
                background-color: #ecf0f1;
            }
            QProgressBar::chunk {
                background-color: #3498db;
                border-radius: 3px;
            }
        """)
        main_layout.addWidget(self.progress_bar)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        splitter = QSplitter(Qt.Vertical)
        
        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞
        output_frame = QFrame()
        output_frame.setFrameStyle(QFrame.StyledPanel)
        output_frame.setStyleSheet("""
            QFrame {
                background-color: white;
                border: 2px solid #bdc3c7;
                border-radius: 8px;
            }
        """)
        
        output_layout = QVBoxLayout(output_frame)
        
        output_label = QLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
        output_label.setObjectName("output_label")
        output_label.setFont(QFont("Segoe UI", 12, QFont.Bold))
        output_label.setStyleSheet("color: #2c3e50; margin-bottom: 5px;")
        output_layout.addWidget(output_label)
        
        self.output_text = QTextEdit()
        self.output_text.setFont(QFont("Consolas", 10))
        self.output_text.setStyleSheet("""
            QTextEdit {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 5px;
                padding: 10px;
                color: #2c3e50;
            }
        """)
        self.output_text.setContextMenuPolicy(Qt.CustomContextMenu)
        self.output_text.customContextMenuRequested.connect(self.show_context_menu)
        output_layout.addWidget(self.output_text)
        
        splitter.addWidget(output_frame)
        main_layout.addWidget(splitter)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.statusBar().showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
        self.update_ui_texts()
        
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f6fa;
            }
        """)
        
    def change_language(self, index):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        print(f"\n\n*** –°–ú–ï–ù–ê –Ø–ó–´–ö–ê: –∏–Ω–¥–µ–∫—Å={index} ***\n\n")
        lang_code = self.lang_combo.itemData(index)
        print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞: {lang_code}")
        print(f"–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: {self.current_language}")
        
        if lang_code == self.current_language:
            print("–Ø–∑—ã–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –≤—ã—Ö–æ–¥ –∏–∑ –º–µ—Ç–æ–¥–∞")
            return
            
        self.current_language = lang_code
        print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π —è–∑—ã–∫: {self.current_language}")
        self.update_ui_texts()
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ UI –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        
    def update_ui_texts(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º"""
        texts = self.get_ui_texts()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self.setWindowTitle(texts["window_title"])
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        self.browse_btn.setText(texts["browse_btn"])
        self.scan_btn.setText(texts["scan_btn"])
        self.stop_btn.setText(texts["stop_btn"])
        self.stats_btn.setText(texts["stats_btn"])
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–µ–π–±–ª–æ–≤
        title_label = self.findChild(QLabel, "title_label")
        if title_label:
            title_label.setText(texts["title_label"])
            
        subtitle_label = self.findChild(QLabel, "subtitle_label")
        if subtitle_label:
            subtitle_label.setText(texts["subtitle_label"])
            
        output_label = self.findChild(QLabel, "output_label")
        if output_label:
            output_label.setText(texts["output_label"])
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–±–∞—Ä–∞
        if self.progress_label.text() == "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ" or self.progress_label.text() == "Ready to work":
            self.progress_label.setText(texts["ready_status"])
            self.statusBar().showMessage(texts["ready_status"])
            
    def get_ui_texts(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º"""
        texts = {
            "ru": {
                "window_title": "Python Import Parser - –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤",
                "title_label": "Python Import Parser",
                "subtitle_label": "–ê–Ω–∞–ª–∏–∑ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ Python –ø—Ä–æ–µ–∫—Ç–∞—Ö",
                "browse_btn": "üìÅ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É",
                "scan_btn": "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å",
                "stop_btn": "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                "stats_btn": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                "output_label": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:",
                "ready_status": "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                "folder_selected": "–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {}",
                "warning_title": "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                "warning_select_folder": "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!",
                "scan_started": "üîç –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...",
                "scan_stopped": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                "scan_completed": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                "error_title": "–û—à–∏–±–∫–∞",
                "error_message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:\n{}",
                "no_imports": "‚ùå –ò–º–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                "found_libraries": "‚úÖ –ù–∞–π–¥–µ–Ω–æ {} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫",
                "total_imports": "üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {}",
                "top_libraries": "üèÜ –¢–æ–ø-10 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫:",
                "more_libraries": "... –∏ –µ—â–µ {} –±–∏–±–ª–∏–æ—Ç–µ–∫",
                "info_title": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                "scan_first": "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!",
                "stats_next_update": "–û–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!",
                "copy_action": "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
                "clear_action": "üóë –û—á–∏—Å—Ç–∏—Ç—å",
                "copied_to_clipboard": "–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"
            },
            "en": {
                "window_title": "Python Import Parser - Import Analysis",
                "title_label": "Python Import Parser",
                "subtitle_label": "Analysis and statistics of imports in Python projects",
                "browse_btn": "üìÅ Select Folder",
                "scan_btn": "üîç Scan",
                "stop_btn": "‚èπ Stop",
                "stats_btn": "üìä Statistics",
                "output_label": "Analysis Results:",
                "ready_status": "Ready to work",
                "folder_selected": "Selected folder: {}",
                "warning_title": "Warning",
                "warning_select_folder": "Please select a folder to scan first!",
                "scan_started": "üîç Starting scan...",
                "scan_stopped": "Scan stopped",
                "scan_completed": "Scan completed",
                "error_title": "Error",
                "error_message": "An error occurred during scanning:\n{}",
                "no_imports": "‚ùå No imports found",
                "found_libraries": "‚úÖ Found {} unique libraries",
                "total_imports": "üìä Total number of imports: {}",
                "top_libraries": "üèÜ Top 10 most popular libraries:",
                "more_libraries": "... and {} more libraries",
                "info_title": "Information",
                "scan_first": "Please run a scan first!",
                "stats_next_update": "Statistics window will be implemented in the next update!",
                "copy_action": "üìã Copy",
                "clear_action": "üóë Clear",
                "copied_to_clipboard": "Text copied to clipboard"
            }
        }
        
        return texts.get(self.current_language, texts["ru"])
        
    def browse_directory(self):
        """–í—ã–±–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        texts = self.get_ui_texts()
        directory = QFileDialog.getExistingDirectory(
            self, 
            texts["browse_btn"].replace("üìÅ ", ""),
            os.getcwd()
        )
        
        if directory:
            self.selected_directory = directory
            self.scan_btn.setEnabled(True)
            folder_text = texts["folder_selected"].format(directory)
            self.progress_label.setText(folder_text)
            self.statusBar().showMessage(folder_text)
            
    def start_scan(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        texts = self.get_ui_texts()
        
        if not hasattr(self, 'selected_directory'):
            QMessageBox.warning(self, texts["warning_title"], texts["warning_select_folder"])
            return
            
        self.stop_event.clear()
        self.scan_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        self.browse_btn.setEnabled(False)
        self.progress_bar.setVisible(True)
        self.progress_bar.setRange(0, 0)  # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        
        self.output_text.clear()
        self.output_text.append(texts["scan_started"] + "\n")
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scan_worker = ScanWorker(self.selected_directory, self.stop_event)
        self.scan_worker.progress_updated.connect(self.update_progress)
        self.scan_worker.scan_completed.connect(self.scan_completed)
        self.scan_worker.error_occurred.connect(self.scan_error)
        self.scan_worker.start()
        
    def stop_scan(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        texts = self.get_ui_texts()
        
        self.stop_event.set()
        if self.scan_worker and self.scan_worker.isRunning():
            self.scan_worker.terminate()
            self.scan_worker.wait()
            
        self.scan_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.browse_btn.setEnabled(True)
        self.progress_bar.setVisible(False)
        self.progress_label.setText(texts["scan_stopped"])
        self.statusBar().showMessage(texts["scan_stopped"])
        
    def update_progress(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_label.setText(message)
        self.output_text.append(f"üìù {message}")
        self.output_text.ensureCursorVisible()
        
    def scan_completed(self, imports_count):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        texts = self.get_ui_texts()
        
        self.imports_count = imports_count
        self.scan_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.browse_btn.setEnabled(True)
        self.progress_bar.setVisible(False)
        self.stats_btn.setEnabled(True)
        
        self.progress_label.setText(texts["scan_completed"] + "!")
        self.statusBar().showMessage(texts["scan_completed"])
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.display_results(imports_count)
        
    def scan_error(self, error_message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        texts = self.get_ui_texts()
        
        QMessageBox.critical(self, texts["error_title"], texts["error_message"].format(error_message))
        self.scan_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.browse_btn.setEnabled(True)
        self.progress_bar.setVisible(False)
        
    def display_results(self, imports_count):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        texts = self.get_ui_texts()
        
        if not imports_count:
            self.output_text.append(texts["no_imports"])
            return
            
        total_imports = sum(imports_count.values())
        self.output_text.append(f"\n{texts['found_libraries'].format(len(imports_count))}")
        self.output_text.append(f"{texts['total_imports'].format(total_imports)}\n")
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        sorted_imports = sorted(imports_count.items(), key=lambda x: x[1], reverse=True)
        
        self.output_text.append(texts["top_libraries"])
        for i, (lib, count) in enumerate(sorted_imports[:10], 1):
            percentage = (count / total_imports) * 100
            self.output_text.append(f"{i:2d}. {lib:20s} - {count:4d} ({percentage:5.1f}%)")
            
        if len(sorted_imports) > 10:
            self.output_text.append(f"\n{texts['more_libraries'].format(len(sorted_imports) - 10)}")
            
    def show_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        texts = self.get_ui_texts()
        
        if not self.imports_count:
            QMessageBox.information(self, texts["info_title"], texts["scan_first"])
            return
            
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –æ–∫–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        QMessageBox.information(self, texts["stats_btn"].replace("üìä ", ""), texts["stats_next_update"])
        
    def show_context_menu(self, position):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é"""
        texts = self.get_ui_texts()
        menu = QMenu(self)
        
        copy_action = QAction(texts["copy_action"], self)
        copy_action.triggered.connect(self.copy_to_clipboard)
        menu.addAction(copy_action)
        
        clear_action = QAction(texts["clear_action"], self)
        clear_action.triggered.connect(self.output_text.clear)
        menu.addAction(clear_action)
        
        menu.exec_(self.output_text.mapToGlobal(position))
        
    def copy_to_clipboard(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        texts = self.get_ui_texts()
        text = self.output_text.toPlainText()
        if text:
            pyperclip.copy(text)
            self.statusBar().showMessage(texts["copied_to_clipboard"], 2000)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ main.py)
def get_gitignore_excluded_dirs(gitignore_path='.gitignore'):
    excluded_dirs = []
    try:
        with open(gitignore_path, 'r', encoding='utf-8') as f:
            excluded_dirs = [line.strip() for line in f.readlines() if line.strip() and not line.startswith('#')]
    except FileNotFoundError:
        pass
    return excluded_dirs

def is_excluded_directory(directory, excluded_dirs):
    if any(excluded_dir in directory for excluded_dir in excluded_dirs):
        return True
    return False

def find_imports_in_file(file_path):
    imports = []
    excluded = {
        '__future__', 'warnings', 'io', 'typing', 'collections', 'contextlib', 'types', 'abc', 'forwarding',
        'ssl', 'distutils', 'operator', 'pathlib', 'dataclasses', 'inspect', 'socket', 'shutil', 'attr',
        'tempfile', 'zipfile', 'betterproto', 'the', 'struct', 'base64', 'optparse', 'textwrap', 'setuptools',
        'pkg_resources', 'multidict', 'enum', 'copy', 'importlib', 'traceback', 'six', 'binascii', 'stat',
        'errno', 'grpclib', 'posixpath', 'zlib', 'pytz', 'bisect', 'weakref', 'winreg', 'fnmatch', 'site',
        'email', 'html', 'mimetypes', 'locale', 'calendar', 'shlex', 'unicodedata', 'babel', 'pkgutil', 'ipaddress',
        'arq', 'rsa', 'handlers', 'opentele', 'states', 'os', 'utils', 'database', 'time', 'models', 'loader', 'keyboards',
        'sys', 're', 'data', 'commands', 'functions', 'config', 'roop', 'keras', 'configparser', ''
    }

    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            tree = ast.parse(f.read(), filename=file_path)

        for node in ast.walk(tree):
            if isinstance(node, ast.Import):
                for alias in node.names:
                    lib = alias.name.split('.')[0]
                    if lib and lib not in excluded and lib.isidentifier():
                        imports.append(lib)
            elif isinstance(node, ast.ImportFrom):
                if node.module:
                    lib = node.module.split('.')[0]
                    if lib and lib not in excluded and lib.isidentifier():
                        imports.append(lib)

    except Exception:
        pass

    return imports
