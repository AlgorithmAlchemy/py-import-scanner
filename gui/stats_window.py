"""
–û–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º PySide6 –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""

import os
import ast
import datetime
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
from PySide6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                               QPushButton, QLabel, QTabWidget, QTableWidget,
                               QTableWidgetItem, QFrame, QScrollArea, QTextEdit)
from PySide6.QtCore import Qt, QThread, Signal
from PySide6.QtGui import QFont, QPixmap
import seaborn as sns

from utils import read_gitignore, is_ignored, find_projects

IGNORED_DIRS = {'.git', '__pycache__', '.idea', '.vscode', '.venv', '.eggs'}


class StatsWorker(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    progress_updated = Signal(str)
    analysis_completed = Signal(dict)
    error_occurred = Signal(str)
    
    def __init__(self, directory):
        super().__init__()
        self.directory = directory
        
    def run(self):
        try:
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
            structure = self.analyze_project_structure(self.directory)
            
            # –ü–∞—Ä—Å–∏–Ω–≥ Python —Ñ–∞–π–ª–æ–≤
            project_stats = self.parse_python_files(self.directory)
            
            results = {
                'structure': structure,
                'project_stats': project_stats
            }
            
            self.analysis_completed.emit(results)
            
        except Exception as e:
            self.error_occurred.emit(str(e))
    
    def analyze_project_structure(self, directory):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        self.progress_updated.emit("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...")
        
        ignored_paths = read_gitignore(directory)
        
        structure = {
            'total_files': 0,
            'total_dirs': 0,
            'py_files': 0,
            'py_files_venv': 0,
            'other_files': 0,
            'folders': []
        }
        
        venv_like = ('venv', '.venv', 'env', '.env', '__pycache__', '.git', '.idea', '.vscode', '.mypy_cache')
        
        for root, dirs, files in os.walk(directory):
            # –∏—Å–∫–ª—é—á–∞–µ–º —Å—Ä–∞–∑—É –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏
            dirs[:] = [d for d in dirs if d not in venv_like and not is_ignored(os.path.join(root, d), ignored_paths)]
            
            structure['total_dirs'] += len(dirs)
            structure['total_files'] += len(files)
            
            for file in files:
                file_path = os.path.join(root, file)
                if file.endswith('.py'):
                    if any(p in file_path for p in venv_like) or is_ignored(file_path, ignored_paths):
                        structure['py_files_venv'] += 1
                    else:
                        structure['py_files'] += 1
                else:
                    structure['other_files'] += 1
                    
            relative_root = os.path.relpath(root, directory)
            structure['folders'].append(relative_root)
            
        return structure
    
    def parse_python_files(self, projects_dir, export=True, max_files=5000, max_depth=6):
        """–ü–∞—Ä—Å–∏–Ω–≥ Python —Ñ–∞–π–ª–æ–≤"""
        self.progress_updated.emit("–ü–∞—Ä—Å–∏–Ω–≥ Python —Ñ–∞–π–ª–æ–≤...")
        
        project_stats = {}
        scanned_files = 0
        
        for root, dirs, files in os.walk(projects_dir):
            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            dirs[:] = [d for d in dirs if d not in IGNORED_DIRS]
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã
            rel_root = os.path.relpath(root, projects_dir)
            depth = rel_root.count(os.sep)
            if depth > max_depth:
                continue
                
            py_files = [f for f in files if f.endswith(".py")]
            if not py_files:
                continue
                
            project_name = rel_root.replace(os.sep, " / ") if rel_root != "." else "ROOT"
            
            if project_name not in project_stats:
                project_stats[project_name] = {
                    "py_count": 0,
                    "libs": set(),
                    "created": None,
                    "dirs": set()
                }
                
            for file in py_files:
                file_path = os.path.join(root, file)
                scanned_files += 1
                project_stats[project_name]["py_count"] += 1
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
                try:
                    creation_time = os.path.getctime(file_path)
                    creation_date = datetime.datetime.fromtimestamp(creation_time)
                    
                    if project_stats[project_name]["created"] is None:
                        project_stats[project_name]["created"] = creation_date
                    elif creation_date < project_stats[project_name]["created"]:
                        project_stats[project_name]["created"] = creation_date
                except:
                    pass
                    
                # –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤
                try:
                    with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                        tree = ast.parse(f.read(), filename=file_path)
                        
                    for node in ast.walk(tree):
                        if isinstance(node, ast.Import):
                            for alias in node.names:
                                lib = alias.name.split('.')[0]
                                if lib and lib.isidentifier():
                                    project_stats[project_name]["libs"].add(lib)
                        elif isinstance(node, ast.ImportFrom):
                            if node.module:
                                lib = node.module.split('.')[0]
                                if lib and lib.isidentifier():
                                    project_stats[project_name]["libs"].add(lib)
                except:
                    pass
                    
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                project_stats[project_name]["dirs"].add(os.path.dirname(file_path))
                
        return project_stats


class StatsWindow(QMainWindow):
    """–û–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    def __init__(self, imports_count, parent=None):
        super().__init__(parent)
        self.imports_count = imports_count
        self.stats_worker = None
        
        self.init_ui()
        self.setup_styles()
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ - Python Import Parser")
        self.setMinimumSize(1200, 800)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(15)
        main_layout.setContentsMargins(20, 20, 20, 20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞")
        title_label.setFont(QFont("Segoe UI", 20, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("color: #2c3e50; margin-bottom: 10px;")
        main_layout.addWidget(title_label)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.tab_widget = QTabWidget()
        self.tab_widget.setStyleSheet("""
            QTabWidget::pane {
                border: 2px solid #bdc3c7;
                border-radius: 8px;
                background-color: white;
            }
            QTabBar::tab {
                background-color: #ecf0f1;
                padding: 10px 20px;
                margin-right: 2px;
                border-top-left-radius: 6px;
                border-top-right-radius: 6px;
                font-weight: bold;
            }
            QTabBar::tab:selected {
                background-color: #3498db;
                color: white;
            }
            QTabBar::tab:hover {
                background-color: #2980b9;
                color: white;
            }
        """)
        
        # –í–∫–ª–∞–¥–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        self.create_charts_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π
        self.create_table_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        self.create_details_tab()
        
        main_layout.addWidget(self.tab_widget)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_layout = QHBoxLayout()
        
        self.export_btn = QPushButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV")
        self.export_btn.setFont(QFont("Segoe UI", 11))
        self.export_btn.clicked.connect(self.export_to_csv)
        self.export_btn.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)
        
        self.close_btn = QPushButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å")
        self.close_btn.setFont(QFont("Segoe UI", 11))
        self.close_btn.clicked.connect(self.close)
        self.close_btn.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 12px 20px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #c0392b;
            }
        """)
        
        button_layout.addWidget(self.export_btn)
        button_layout.addStretch()
        button_layout.addWidget(self.close_btn)
        
        main_layout.addLayout(button_layout)
        
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f6fa;
            }
        """)
        
    def create_charts_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
        charts_widget = QWidget()
        charts_layout = QVBoxLayout(charts_widget)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.create_imports_chart()
        self.create_pie_chart()
        
        charts_layout.addWidget(self.imports_canvas)
        charts_layout.addWidget(self.pie_canvas)
        
        self.tab_widget.addTab(charts_widget, "üìà –ì—Ä–∞—Ñ–∏–∫–∏")
        
    def create_table_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å —Ç–∞–±–ª–∏—Ü–µ–π"""
        table_widget = QWidget()
        table_layout = QVBoxLayout(table_widget)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        self.table = QTableWidget()
        self.table.setStyleSheet("""
            QTableWidget {
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 5px;
                gridline-color: #dee2e6;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                padding: 8px;
                border: 1px solid #dee2e6;
                font-weight: bold;
            }
        """)
        
        self.populate_table()
        table_layout.addWidget(self.table)
        
        self.tab_widget.addTab(table_widget, "üìã –¢–∞–±–ª–∏—Ü–∞")
        
    def create_details_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        details_widget = QWidget()
        details_layout = QVBoxLayout(details_widget)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        self.details_text = QTextEdit()
        self.details_text.setFont(QFont("Consolas", 10))
        self.details_text.setStyleSheet("""
            QTextEdit {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 5px;
                padding: 10px;
                color: #2c3e50;
            }
        """)
        
        self.populate_details()
        details_layout.addWidget(self.details_text)
        
        self.tab_widget.addTab(details_widget, "üìù –î–µ—Ç–∞–ª–∏")
        
    def create_imports_chart(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        if not self.imports_count:
            return
            
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã
        fig = Figure(figsize=(10, 6))
        ax = fig.add_subplot(111)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        sorted_imports = sorted(self.imports_count.items(), key=lambda x: x[1], reverse=True)
        top_imports = sorted_imports[:15]  # –¢–æ–ø-15
        
        libraries = [item[0] for item in top_imports]
        counts = [item[1] for item in top_imports]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        bars = ax.bar(libraries, counts, color='#3498db', alpha=0.8)
        ax.set_title('–¢–æ–ø-15 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫', fontsize=14, fontweight='bold')
        ax.set_xlabel('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏', fontsize=12)
        ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Ä—Ç–æ–≤', fontsize=12)
        
        # –ü–æ–≤–æ—Ä–æ—Ç –ø–æ–¥–ø–∏—Å–µ–π
        ax.tick_params(axis='x', rotation=45)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar, count in zip(bars, counts):
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height + 0.01,
                   f'{count}', ha='center', va='bottom', fontweight='bold')
        
        fig.tight_layout()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ canvas
        self.imports_canvas = FigureCanvas(fig)
        
    def create_pie_chart(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã"""
        if not self.imports_count:
            return
            
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã
        fig = Figure(figsize=(8, 6))
        ax = fig.add_subplot(111)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        sorted_imports = sorted(self.imports_count.items(), key=lambda x: x[1], reverse=True)
        top_imports = sorted_imports[:10]  # –¢–æ–ø-10
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        other_count = sum(count for _, count in sorted_imports[10:])
        if other_count > 0:
            top_imports.append(('–û—Å—Ç–∞–ª—å–Ω—ã–µ', other_count))
        
        libraries = [item[0] for item in top_imports]
        counts = [item[1] for item in top_imports]
        
        # –¶–≤–µ—Ç–∞
        colors = plt.cm.Set3(np.linspace(0, 1, len(libraries)))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        wedges, texts, autotexts = ax.pie(counts, labels=libraries, autopct='%1.1f%%',
                                         colors=colors, startangle=90)
        ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤', fontsize=14, fontweight='bold')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç–∞
        for autotext in autotexts:
            autotext.set_color('white')
            autotext.set_fontweight('bold')
        
        fig.tight_layout()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ canvas
        self.pie_canvas = FigureCanvas(fig)
        
    def populate_table(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã–º–∏"""
        if not self.imports_count:
            return
            
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        sorted_imports = sorted(self.imports_count.items(), key=lambda x: x[1], reverse=True)
        total_imports = sum(self.imports_count.values())
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        self.table.setRowCount(len(sorted_imports))
        self.table.setColumnCount(4)
        self.table.setHorizontalHeaderLabels(['–ú–µ—Å—Ç–æ', '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ü—Ä–æ—Ü–µ–Ω—Ç'])
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        for i, (lib, count) in enumerate(sorted_imports):
            percentage = (count / total_imports) * 100
            
            self.table.setItem(i, 0, QTableWidgetItem(str(i + 1)))
            self.table.setItem(i, 1, QTableWidgetItem(lib))
            self.table.setItem(i, 2, QTableWidgetItem(str(count)))
            self.table.setItem(i, 3, QTableWidgetItem(f"{percentage:.1f}%"))
            
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
        self.table.resizeColumnsToContents()
        
    def populate_details(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if not self.imports_count:
            return
            
        total_imports = sum(self.imports_count.values())
        unique_libs = len(self.imports_count)
        
        details = f"""
üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ú–ü–û–†–¢–û–í
{'='*50}

üìà –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
‚Ä¢ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫: {unique_libs}
‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Ä—Ç–æ–≤: {total_imports}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: {total_imports/unique_libs:.1f}

üèÜ –¢–û–ü-20 –°–ê–ú–´–• –ü–û–ü–£–õ–Ø–†–ù–´–• –ë–ò–ë–õ–ò–û–¢–ï–ö:
{'='*50}
"""
        
        sorted_imports = sorted(self.imports_count.items(), key=lambda x: x[1], reverse=True)
        
        for i, (lib, count) in enumerate(sorted_imports[:20], 1):
            percentage = (count / total_imports) * 100
            details += f"{i:2d}. {lib:25s} - {count:4d} –∏–º–ø–æ—Ä—Ç–æ–≤ ({percentage:5.1f}%)\n"
            
        details += f"""
üìã –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –ë–ò–ë–õ–ò–û–¢–ï–ö:
{'='*50}
"""
        
        for i, (lib, count) in enumerate(sorted_imports, 1):
            percentage = (count / total_imports) * 100
            details += f"{i:3d}. {lib:25s} - {count:4d} ({percentage:5.1f}%)\n"
            
        self.details_text.setText(details)
        
    def export_to_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
        if not self.imports_count:
            return
            
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
            data = []
            total_imports = sum(self.imports_count.values())
            
            for lib, count in self.imports_count.items():
                percentage = (count / total_imports) * 100
                data.append({
                    '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞': lib,
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∏–º–ø–æ—Ä—Ç–æ–≤': count,
                    '–ü—Ä–æ—Ü–µ–Ω—Ç': round(percentage, 2)
                })
                
            df = pd.DataFrame(data)
            df = df.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∏–º–ø–æ—Ä—Ç–æ–≤', ascending=False)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            filename = f"import_statistics_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            df.to_csv(filename, index=False, encoding='utf-8-sig')
            
            from PySide6.QtWidgets import QMessageBox
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
            
        except Exception as e:
            from PySide6.QtWidgets import QMessageBox
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)
def open_stats_window(parent, imports_count):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats_window = StatsWindow(imports_count, parent)
    stats_window.show()
    return stats_window
