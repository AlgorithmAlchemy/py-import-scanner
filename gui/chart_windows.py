# gui/chart_windows.py

import matplotlib
matplotlib.use('Qt5Agg')
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
from PySide6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                               QPushButton, QLabel, QFileDialog, QMessageBox)
from PySide6.QtCore import Qt
from PySide6.QtGui import QFont
import datetime
import numpy as np


class ChartWindow(QMainWindow):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–∫–æ–Ω —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    
    def __init__(self, imports_count, chart_type, parent=None):
        super().__init__(parent)
        self.imports_count = imports_count
        self.chart_type = chart_type
        self.canvas = None
        self.init_ui()
        self.setup_styles()
        
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if self.chart_type == "bar":
            self.setWindowTitle("üìä –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∏–º–ø–æ—Ä—Ç–æ–≤")
            self.setGeometry(200, 200, 1000, 600)
        else:
            self.setWindowTitle("ü•ß –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –∏–º–ø–æ—Ä—Ç–æ–≤")
            self.setGeometry(200, 200, 800, 600)
            
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        main_layout = QVBoxLayout(central_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel(f"–ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ Python - {self.chart_type.upper()}")
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setFont(QFont("Arial", 16, QFont.Bold))
        main_layout.addWidget(title_label)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        self.create_chart()
        if self.canvas:
            main_layout.addWidget(self.canvas)
        
        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
        button_layout = QHBoxLayout()
        
        save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫")
        save_btn.clicked.connect(self.save_chart)
        save_btn.setMinimumHeight(40)
        
        close_btn = QPushButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.close)
        close_btn.setMinimumHeight(40)
        
        button_layout.addWidget(save_btn)
        button_layout.addStretch()
        button_layout.addWidget(close_btn)
        
        main_layout.addLayout(button_layout)
        
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f8f9fa;
            }
            QPushButton {
                background-color: #007bff;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #0056b3;
            }
            QPushButton:pressed {
                background-color: #004085;
            }
            QLabel {
                color: #2c3e50;
                font-size: 16px;
            }
        """)
        
    def create_chart(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö)"""
        pass
        
    def save_chart(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞"""
        if not self.canvas:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ì—Ä–∞—Ñ–∏–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return
            
        try:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
            default_name = f"import_chart_{self.chart_type}_{timestamp}.png"
            
            filename, _ = QFileDialog.getSaveFileName(
                self, 
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", 
                default_name,
                "PNG —Ñ–∞–π–ª—ã (*.png);;JPEG —Ñ–∞–π–ª—ã (*.jpg);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
            )
            
            if filename:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
                self.canvas.figure.savefig(filename, dpi=300, bbox_inches='tight')
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:\n{filename}")
                
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:\n{str(e)}")


class BarChartWindow(ChartWindow):
    """–û–∫–Ω–æ —Å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–æ–π"""
    
    def __init__(self, imports_count, parent=None):
        super().__init__(imports_count, "bar", parent)
        
    def create_chart(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã"""
        if not self.imports_count:
            return
            
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã
        fig = Figure(figsize=(12, 8))
        ax = fig.add_subplot(111)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        sorted_imports = sorted(self.imports_count.items(), key=lambda x: x[1], reverse=True)
        top_imports = sorted_imports[:20]  # –¢–æ–ø-20
        
        libraries = [item[0] for item in top_imports]
        counts = [item[1] for item in top_imports]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        bars = ax.barh(libraries, counts, color='#3498db', alpha=0.8)
        ax.set_title('–¢–æ–ø-20 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫', fontsize=16, fontweight='bold')
        ax.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Ä—Ç–æ–≤', fontsize=14)
        ax.set_ylabel('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏', fontsize=14)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar, count in zip(bars, counts):
            width = bar.get_width()
            ax.text(width + width * 0.01, bar.get_y() + bar.get_height()/2,
                   f'{count}', ha='left', va='center', fontweight='bold')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        ax.grid(True, alpha=0.3)
        ax.set_axisbelow(True)
        
        fig.tight_layout()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ canvas
        self.canvas = FigureCanvas(fig)


class PieChartWindow(ChartWindow):
    """–û–∫–Ω–æ —Å –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º–æ–π"""
    
    def __init__(self, imports_count, parent=None):
        super().__init__(imports_count, "pie", parent)
        
    def create_chart(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã"""
        if not self.imports_count:
            return
            
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã
        fig = Figure(figsize=(10, 8))
        ax = fig.add_subplot(111)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        sorted_imports = sorted(self.imports_count.items(), key=lambda x: x[1], reverse=True)
        top_imports = sorted_imports[:15]  # –¢–æ–ø-15
        others_count = sum(count for _, count in sorted_imports[15:])
        
        libraries = [item[0] for item in top_imports]
        counts = [item[1] for item in top_imports]
        
        # –î–æ–±–∞–≤–ª—è–µ–º "–ü—Ä–æ—á–µ–µ"
        if others_count > 0:
            libraries.append('–ü—Ä–æ—á–µ–µ')
            counts.append(others_count)
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
        colors = plt.cm.Set3(np.linspace(0, 1, len(libraries)))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        wedges, texts, autotexts = ax.pie(counts, labels=libraries, autopct='%1.1f%%',
                                         startangle=90, colors=colors, explode=[0.05] * len(libraries))
        
        ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –ø–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º', fontsize=16, fontweight='bold')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç–∞
        for autotext in autotexts:
            autotext.set_color('white')
            autotext.set_fontweight('bold')
        
        fig.tight_layout()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ canvas
        self.canvas = FigureCanvas(fig)
